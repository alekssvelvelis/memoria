{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\nconst generateCards = difficulty => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap(symbol => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n};\nconst Card = ({\n  content,\n  isFlipped,\n  isMatched,\n  onClick\n}) => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `group rounded-xl h-24 w-24 m-4 [perspective:1000px]`,\n      onClick: () => !isMatched && onClick() // Make unclickable if matched\n      ,\n      style: {\n        opacity: isMatched ? 0.5 : 1,\n        transition: 'opacity 0.25s ease-in' // Decrease opacity if matched\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `relative h-full w-full rounded-xl shadow-xl transition-all duration-500 text-slate-200 [transform-style:preserve-3d] [backface-visibility:hidden] ${isFlipped ? '[transform:rotateY(180deg)]' : isMatched ? 'bg-green-500' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute inset-0 flex rounded-xl bg-red-500 justify-center items-center align-center\",\n          children: isFlipped ? content : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute inset-0 h-full w-full rounded-xl bg-red-500 px-12 flex justify-center items-center align-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden] `,\n          children: isFlipped ? content : content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n// <div\n//   className={`group rounded-xl h-24 w-24 m-4 [perspective:1000px]`}\n//   onClick={() => !isMatched && onClick()} // Make unclickable if matched\n//   style={{\n//     opacity: isMatched ? 0.5 : 1, // Decrease opacity if matched\n//   }}\n// >\n//   <div className={`relative h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] [backface-visibility:hidden] ${isFlipped && !isMatched ? '[transform:rotateY(180deg)]' : (isMatched ? 'bg-green-500' : '')}`}>\n//     <div className='absolute inset-0 flex rounded-xl bg-red-500 justify-center items-center align-center'>\n//       {content}\n//     </div>\n//     <div className='absolute inset-0 h-full w-full rounded-xl bg-green-500 px-12 flex justify-center items-center align-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden]'>\n//       {content}\n//     </div>\n//   </div>\n_c = Card;\nconst MemoryGame = ({\n  difficulty\n}) => {\n  _s();\n  const gridSize = difficulty;\n  const [cards, setCards] = useState(generateCards(difficulty));\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [initialReveal, setInitialReveal] = useState(true);\n  const [timeLeft, updateTimeLeft] = useState(240);\n  console.log(flippedCards);\n  console.log(matchedCards);\n  useEffect(() => {\n    // Shuffle the cards when the component mounts or when the game restarts\n    setCards(generateCards(difficulty));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, 2500);\n    return () => clearTimeout(revealTimeout);\n  }, [difficulty]);\n  const handleCardClick = index => {\n    if (initialReveal) {\n      return;\n    }\n    // Check if the clicked card is already flipped\n    if (flippedCards.includes(index) || flippedCards.length === 3 || matchedCards.some(matched => matched.indexes.includes(index))) {\n      return;\n    }\n\n    // Flip the clicked card\n    setFlippedCards([...flippedCards, index]);\n    if (flippedCards.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedCards[0]];\n      const card2 = cards[flippedCards[1]];\n      const card3 = cards[index];\n      if (card1 === card2 && card2 === card3) {\n        const matchedContent = [card1, card2, card3];\n        const matchedIndexes = [...flippedCards, index];\n        setMatchedCards(prevMatchedCards => [...prevMatchedCards, {\n          content: matchedContent,\n          indexes: matchedIndexes\n        }]);\n        console.log('cards');\n        setFlippedCards([]);\n      } else {\n        console.log('cards mismatched');\n      }\n      setTimeout(() => {\n        setFlippedCards([]);\n      }, 1000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-y-scroll min-h-screen bg-[rgb(18,18,18,0.9)] flex justify-center w-full text-white flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-[10vh]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full flex flex-col justify-center items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Timer 5:00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Turns: 38\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flex items-center justify-center grid grid-cols-${gridSize} gap-3`,\n        children: cards.map((symbol, index) => /*#__PURE__*/_jsxDEV(Card, {\n          content: symbol,\n          isFlipped: initialReveal || flippedCards.includes(index) || matchedCards.some(matched => matched.indexes.includes(index)),\n          isMatched: matchedCards.some(matched => matched.indexes.includes(index)),\n          onClick: () => handleCardClick(index)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryGame, \"bWIFDyj+Gm2/Dd3B2bD/QdTwL3o=\");\n_c2 = MemoryGame;\nexport default MemoryGame;\nvar _c, _c2;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","generateCards","difficulty","symbols","cardCount","pairsCount","jokerCount","cards","slice","flatMap","symbol","Array","fill","concat","Card","content","isFlipped","isMatched","onClick","children","className","style","opacity","transition","fileName","_jsxFileName","lineNumber","columnNumber","_c","MemoryGame","_s","gridSize","setCards","flippedCards","setFlippedCards","matchedCards","setMatchedCards","initialReveal","setInitialReveal","timeLeft","updateTimeLeft","console","log","revealTimeout","setTimeout","clearTimeout","handleCardClick","index","includes","some","matched","indexes","card1","card2","card3","matchedContent","matchedIndexes","prevMatchedCards","map","_c2","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst shuffleArray = (array) => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\nconst generateCards = (difficulty) => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap((symbol) => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n};\n\nconst Card = ({ content, isFlipped, isMatched, onClick }) => {\n  return (\n    <>\n      <div\n        className={`group rounded-xl h-24 w-24 m-4 [perspective:1000px]`}\n        onClick={() => !isMatched && onClick()} // Make unclickable if matched\n        style={{\n          opacity: isMatched ? 0.5 : 1,\n          transition: 'opacity 0.25s ease-in', // Decrease opacity if matched\n        }}\n      >\n        <div className={`relative h-full w-full rounded-xl shadow-xl transition-all duration-500 text-slate-200 [transform-style:preserve-3d] [backface-visibility:hidden] ${isFlipped ? '[transform:rotateY(180deg)]' : (isMatched ? 'bg-green-500' : '')}`}>\n          <div className='absolute inset-0 flex rounded-xl bg-red-500 justify-center items-center align-center'>\n            {isFlipped ? content : ''}\n          </div>\n          <div className={`absolute inset-0 h-full w-full rounded-xl bg-red-500 px-12 flex justify-center items-center align-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden] `}>\n            {isFlipped ? content : content}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n// <div\n    //   className={`group rounded-xl h-24 w-24 m-4 [perspective:1000px]`}\n    //   onClick={() => !isMatched && onClick()} // Make unclickable if matched\n    //   style={{\n    //     opacity: isMatched ? 0.5 : 1, // Decrease opacity if matched\n    //   }}\n    // >\n    //   <div className={`relative h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] [backface-visibility:hidden] ${isFlipped && !isMatched ? '[transform:rotateY(180deg)]' : (isMatched ? 'bg-green-500' : '')}`}>\n    //     <div className='absolute inset-0 flex rounded-xl bg-red-500 justify-center items-center align-center'>\n    //       {content}\n    //     </div>\n    //     <div className='absolute inset-0 h-full w-full rounded-xl bg-green-500 px-12 flex justify-center items-center align-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden]'>\n    //       {content}\n    //     </div>\n    //   </div>\n\nconst MemoryGame = ({ difficulty }) => {\n  const gridSize = difficulty;\n  const [cards, setCards] = useState(generateCards(difficulty));\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [initialReveal, setInitialReveal] = useState(true);\n  const [timeLeft, updateTimeLeft] = useState(240);\n  console.log(flippedCards);\n  console.log(matchedCards);\n\n  useEffect(() => {\n    // Shuffle the cards when the component mounts or when the game restarts\n    setCards(generateCards(difficulty));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, 2500);\n\n    return () => clearTimeout(revealTimeout);\n  }, [difficulty]);\n\n  const handleCardClick = (index) => {\n    if (initialReveal) {\n      return;\n    }\n    // Check if the clicked card is already flipped\n    if (\n      flippedCards.includes(index) ||\n      flippedCards.length === 3 ||\n      matchedCards.some((matched) => matched.indexes.includes(index))\n    ) {\n      return;\n    }\n\n    // Flip the clicked card\n    setFlippedCards([...flippedCards, index]);\n\n    if (flippedCards.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedCards[0]];\n      const card2 = cards[flippedCards[1]];\n      const card3 = cards[index];\n\n      if (card1 === card2 && card2 === card3) {\n        const matchedContent = [card1, card2, card3];\n        const matchedIndexes = [...flippedCards, index];\n        setMatchedCards((prevMatchedCards) => [\n          ...prevMatchedCards,\n          { content: matchedContent, indexes: matchedIndexes },\n        ]);\n        console.log('cards');\n        setFlippedCards([]);\n      } else {\n        console.log('cards mismatched');\n      }\n\n      setTimeout(() => {\n        setFlippedCards([]);\n      }, 1000);\n\n    }\n  };\n\n  return (\n    <div className=\"overflow-y-scroll min-h-screen bg-[rgb(18,18,18,0.9)] flex justify-center w-full text-white flex-col\">\n      <div className='w-full h-[10vh]'></div>\n      <div className='w-full h-full flex flex-col justify-center items-center'>\n      <h1>Timer 5:00</h1>\n      <h1>Turns: 38</h1>\n        <div className={`flex items-center justify-center grid grid-cols-${gridSize} gap-3`}>\n          {cards.map((symbol, index) => (\n            <Card\n              key={index}\n              content={symbol}\n              isFlipped={initialReveal || flippedCards.includes(index) || matchedCards.some((matched) => matched.indexes.includes(index))}\n              isMatched={matchedCards.some((matched) => matched.indexes.includes(index))}\n              onClick={() => handleCardClick(index)}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MemoryGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}