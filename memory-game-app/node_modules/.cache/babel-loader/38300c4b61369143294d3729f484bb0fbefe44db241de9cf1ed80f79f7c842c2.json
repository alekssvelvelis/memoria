{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\nconst generateCards = difficulty => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap(symbol => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Double the cards to create pairs\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n};\nconst Card = ({\n  content,\n  isFlipped,\n  onClick\n}) => {\n  return (\n    /*#__PURE__*/\n    // <div className='group rounded-xl h-48 w-48 [perspective:1000px]'>\n    //     <div className=\"relative h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] group-hover:[transform:rotateY(180deg)]\">\n    //         <div className='absolute inset-0'>\n    //             {/* <div className='h-full w-full rounded-xl object-cover shadow-xl shadow-black/40' >{content}</div> */}\n    //             <img className='w-full h-full rounded-xl object-cover shadow-xl shadow-black/40' src=\"https://i.loli.net/2019/10/18/buDT4YS6zUMfHst.jpg\" />\n    //         </div>\n    //         <div className=\"absolute inset-0 w-full h-full rounded-xl object-cover text-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden]\">\n    //             <img className='w-screen h-full rounded-xl' src=\"https://i.loli.net/2019/11/16/FLnzi5Kq4tkRZSm.jpg\" />\n    //         </div>\n    //     </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      className: `group rounded-xl h- w-48 [perspective:1000px] ${isFlipped ? 'flipped' : ''}`,\n      onClick: onClick,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `relative bg-red-500 h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] ${isFlipped ? 'group-hover:[transform:rotateY(180deg)]' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute inset-0\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-full h-full rounded-xl object-cover text-center text-slate-200\",\n            children: isFlipped ? content : ''\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute inset-0 w-full h-full rounded-xl object-cover text-center text-slate-200 [transform-style:preserve-3d] ${isFlipped ? '[transform:rotateY(180deg)] [backface-visibility:hidden]' : ''}`,\n          children: isFlipped ? '' : content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c = Card;\nconst MemoryGame = ({\n  difficulty\n}) => {\n  _s();\n  const [cards, setCards] = useState(generateCards(difficulty));\n  const [flippedIndices, setFlippedIndices] = useState([]);\n  useEffect(() => {\n    // Shuffle the cards when the component mounts or when the game restarts\n    setCards(generateCards(difficulty));\n    setFlippedIndices([]);\n  }, [difficulty]);\n  const handleCardClick = index => {\n    if (flippedIndices.length < 2 && !flippedIndices.includes(index)) {\n      setFlippedIndices([...flippedIndices, index]);\n      if (flippedIndices.length === 1 && cards[flippedIndices[0]] === cards[index]) {\n        // Match found, keep the cards flipped\n        setTimeout(() => {\n          setFlippedIndices([]);\n        }, 1000);\n      } else if (flippedIndices.length === 2) {\n        // No match found, flip back the cards\n        setTimeout(() => {\n          setFlippedIndices([]);\n        }, 1000);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-wrap\",\n    children: cards.map((symbol, index) => /*#__PURE__*/_jsxDEV(Card, {\n      content: symbol,\n      isFlipped: flippedIndices.includes(index),\n      onClick: () => handleCardClick(index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryGame, \"cN3QV+/L3mLlGCEASK6j5KogIsU=\");\n_c2 = MemoryGame;\nexport default MemoryGame;\nvar _c, _c2;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","generateCards","difficulty","symbols","cardCount","pairsCount","jokerCount","cards","slice","flatMap","symbol","Array","fill","concat","Card","content","isFlipped","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MemoryGame","_s","setCards","flippedIndices","setFlippedIndices","handleCardClick","index","includes","setTimeout","map","_c2","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst shuffleArray = (array) => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\nconst generateCards = (difficulty) => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap((symbol) => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Double the cards to create pairs\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n};\n\nconst Card = ({ content, isFlipped, onClick }) => {\n  return (\n    // <div className='group rounded-xl h-48 w-48 [perspective:1000px]'>\n    //     <div className=\"relative h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] group-hover:[transform:rotateY(180deg)]\">\n    //         <div className='absolute inset-0'>\n    //             {/* <div className='h-full w-full rounded-xl object-cover shadow-xl shadow-black/40' >{content}</div> */}\n    //             <img className='w-full h-full rounded-xl object-cover shadow-xl shadow-black/40' src=\"https://i.loli.net/2019/10/18/buDT4YS6zUMfHst.jpg\" />\n    //         </div>\n    //         <div className=\"absolute inset-0 w-full h-full rounded-xl object-cover text-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden]\">\n    //             <img className='w-screen h-full rounded-xl' src=\"https://i.loli.net/2019/11/16/FLnzi5Kq4tkRZSm.jpg\" />\n    //         </div>\n    //     </div>\n    // </div>\n    <div\n      className={`group rounded-xl h- w-48 [perspective:1000px] ${isFlipped ? 'flipped' : ''}`}\n      onClick={onClick}\n    >\n      <div className={`relative bg-red-500 h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] ${isFlipped ? 'group-hover:[transform:rotateY(180deg)]' : ''}`}>\n        <div className='absolute inset-0'>\n          <div className='w-full h-full rounded-xl object-cover text-center text-slate-200'>\n            {isFlipped ? content : ''}\n          </div>\n        </div>\n        <div className={`absolute inset-0 w-full h-full rounded-xl object-cover text-center text-slate-200 [transform-style:preserve-3d] ${isFlipped ? '[transform:rotateY(180deg)] [backface-visibility:hidden]' : ''}`}>\n          {isFlipped ? '' : content}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst MemoryGame = ({ difficulty }) => {\n  const [cards, setCards] = useState(generateCards(difficulty));\n  const [flippedIndices, setFlippedIndices] = useState([]);\n\n  useEffect(() => {\n    // Shuffle the cards when the component mounts or when the game restarts\n    setCards(generateCards(difficulty));\n    setFlippedIndices([]);\n  }, [difficulty]);\n\n  const handleCardClick = (index) => {\n    if (flippedIndices.length < 2 && !flippedIndices.includes(index)) {\n      setFlippedIndices([...flippedIndices, index]);\n\n      if (flippedIndices.length === 1 && cards[flippedIndices[0]] === cards[index]) {\n        // Match found, keep the cards flipped\n        setTimeout(() => {\n          setFlippedIndices([]);\n        }, 1000);\n      } else if (flippedIndices.length === 2) {\n        // No match found, flip back the cards\n        setTimeout(() => {\n          setFlippedIndices([]);\n        }, 1000);\n      }\n    }\n  };\n\n  return (\n    <div className='flex flex-wrap'>\n      {cards.map((symbol, index) => (\n        <Card\n          key={index}\n          content={symbol}\n          isFlipped={flippedIndices.includes(index)}\n          onClick={() => handleCardClick(index)}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default MemoryGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}