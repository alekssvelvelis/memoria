{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport ResultScreen from './ResultScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\nconst generateCards = (difficulty, theme) => {\n  const symbols = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '1', '12', '13', '14', '15', '16'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3;\n  const jokerCount = cardCount % 3;\n  let cards = symbols.slice(0, pairsCount).flatMap(symbol => Array(3).fill(symbol));\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n  cards = shuffleArray(cards);\n  const imageFolderPath = `images/${theme}/`;\n  cards = cards.map(card => {\n    if (card === 'Joker') {\n      return `/${imageFolderPath}joker.jpeg`;\n    } else {\n      return `/${imageFolderPath}${card}.jpeg`;\n    }\n  });\n  return cards;\n};\nconst MemoryGame = ({\n  difficulty,\n  theme\n}) => {\n  _s();\n  const [totalPairs, setTotalPairs] = useState(difficulty * difficulty / 3);\n  const [diffToPlay, setDiffToPlay] = useState(difficulty);\n  const [cards, setCards] = useState(generateCards(diffToPlay, theme));\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [initialReveal, setInitialReveal] = useState(true);\n  const [timeLeft, updateTimeLeft] = useState(10);\n  const [currentTurnCount, setTurnCount] = useState(0);\n  const [gameOutcome, setGameOutcome] = useState(null);\n  useEffect(() => {\n    setCards(generateCards(diffToPlay, theme));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, diffToPlay > 4 ? 6000 : 3000);\n    return () => clearTimeout(revealTimeout);\n  }, [diffToPlay, theme]);\n  useEffect(() => {\n    if (!initialReveal && timeLeft > 0) {\n      if (matchedCards.length === totalPairs) {\n        console.log('You win!');\n        setGameOutcome(true);\n      } else {\n        const remainingUnmatchedCards = cards.filter((symbol, index) => !flippedCards.includes(index) && !matchedCards.some(matched => matched.indexes.includes(index)));\n        if (remainingUnmatchedCards.length === 1 && remainingUnmatchedCards[0] === `/images/${theme}/joker.jpeg`) {\n          console.log('You win! Only the Joker is left.');\n          setGameOutcome(true);\n        }\n      }\n    } else if (!initialReveal && (timeLeft === 0 || timeLeft < 0)) {\n      console.log('You lose!');\n      setGameOutcome(false);\n    }\n  }, [initialReveal, timeLeft, matchedCards, totalPairs, cards, flippedCards]);\n  useEffect(() => {\n    if (!initialReveal && timeLeft > 0 && gameOutcome !== true) {\n      const timerInterval = setInterval(() => {\n        if (gameOutcome !== true) {\n          updateTimeLeft(prevTime => prevTime - 1);\n        }\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    }\n  }, [initialReveal, timeLeft, gameOutcome, matchedCards, totalPairs]);\n  const handleCardClick = index => {\n    if (initialReveal || gameOutcome) {\n      return;\n    }\n    // Check if the clicked card is already flipped\n    if (flippedCards.includes(index) || flippedCards.length === 3 || matchedCards.some(matched => matched.indexes.includes(index))) {\n      return;\n    }\n    // Flip the clicked card\n    setFlippedCards([...flippedCards, index]);\n    if (flippedCards.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedCards[0]];\n      const card2 = cards[flippedCards[1]];\n      const card3 = cards[index];\n      if (card1 === card2 && card2 === card3) {\n        const matchedContent = [card1, card2, card3];\n        const matchedIndexes = [...flippedCards, index];\n        setMatchedCards(prevMatchedCards => [...prevMatchedCards, {\n          content: matchedContent,\n          indexes: matchedIndexes\n        }]);\n        console.log('cards matched');\n        setFlippedCards([]);\n        setTurnCount(currentTurnCount + 1);\n      } else {\n        console.log('cards mismatched');\n        setTurnCount(currentTurnCount + 1);\n      }\n      setTimeout(() => {\n        setFlippedCards([]);\n      }, 500);\n    }\n  };\n  const handlePlayAgain = () => {\n    setGameOutcome(null);\n    setTurnCount(0);\n    updateTimeLeft(240);\n    setCards(generateCards(difficulty, theme));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, difficulty > 4 ? 6000 : 3000);\n    return () => clearTimeout(revealTimeout);\n  };\n  const handleNextLevel = () => {\n    const nextDifficulty = diffToPlay + 1;\n    setGameOutcome(null);\n    setTurnCount(0);\n    updateTimeLeft(240);\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n    setTotalPairs(nextDifficulty * nextDifficulty / 3);\n    setCards(generateCards(nextDifficulty, theme));\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, nextDifficulty > 4 ? 6000 : 3000);\n    return () => clearTimeout(revealTimeout);\n  };\n  const formattedTime = `${Math.floor(timeLeft / 60)}:${(timeLeft % 60).toLocaleString('en-US', {\n    minimumIntegerDigits: 2\n  })}`;\n  function getGridScale(difficulty) {\n    let baseScale = 0.12;\n    switch (difficulty) {\n      case 3:\n        baseScale *= 1.6;\n        break;\n      case 4:\n        baseScale *= 1.6;\n        break;\n      case 5:\n        baseScale *= 1.25;\n        break;\n      case 6:\n        baseScale *= 1.11;\n        break;\n      case 7:\n        baseScale *= 0.98;\n        break;\n      default:\n        break;\n    }\n    return Math.min(window.innerWidth * baseScale, 100);\n  }\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overflow-y-scroll min-h-screen bg-[rgb(18,18,18,0.9)] flex justify-center w-full text-white flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full h-[10vh]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full h-full flex flex-col justify-center items-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col w-full  h-full items-center justify-center overflow-x-hidden\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"flex justify-around w-1/2 max-[425px]:w-full m-4\",\n            children: [gameOutcome != null && /*#__PURE__*/_jsxDEV(ResultScreen, {\n              time: formattedTime,\n              turns: currentTurnCount,\n              gamestate: gameOutcome,\n              pairs: matchedCards.length,\n              onPlayAgain: handlePlayAgain,\n              onNextLevel: handleNextLevel\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: [\"Timer: \", formattedTime]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 201,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: [\"Turns: \", currentTurnCount]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 202,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n              children: [\"Theme: \", theme]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 203,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 198,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `flex items-center justify-center grid grid-cols-${difficulty} gap-3 mb-6 mt-2`,\n            children: cards.map((symbol, index) => /*#__PURE__*/_jsxDEV(Card, {\n              content: symbol,\n              isFlipped: initialReveal || flippedCards.includes(index) || matchedCards.some(matched => matched.indexes.includes(index)),\n              isMatched: matchedCards.some(matched => matched.indexes.includes(index)),\n              onClick: () => handleCardClick(index),\n              cardSize: getGridScale(difficulty)\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 15\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 197,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(MemoryGame, \"M85MpIP9bAdKriEcyj018TVNlOc=\");\n_c = MemoryGame;\nexport default MemoryGame;\nvar _c;\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","Card","ResultScreen","jsxDEV","_jsxDEV","Fragment","_Fragment","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","generateCards","difficulty","theme","symbols","cardCount","pairsCount","jokerCount","cards","slice","flatMap","symbol","Array","fill","concat","imageFolderPath","map","card","MemoryGame","_s","totalPairs","setTotalPairs","diffToPlay","setDiffToPlay","setCards","flippedCards","setFlippedCards","matchedCards","setMatchedCards","initialReveal","setInitialReveal","timeLeft","updateTimeLeft","currentTurnCount","setTurnCount","gameOutcome","setGameOutcome","revealTimeout","setTimeout","clearTimeout","console","log","remainingUnmatchedCards","filter","index","includes","some","matched","indexes","timerInterval","setInterval","prevTime","clearInterval","handleCardClick","card1","card2","card3","matchedContent","matchedIndexes","prevMatchedCards","content","handlePlayAgain","handleNextLevel","nextDifficulty","formattedTime","toLocaleString","minimumIntegerDigits","getGridScale","baseScale","min","window","innerWidth","children","className","fileName","_jsxFileName","lineNumber","columnNumber","time","turns","gamestate","pairs","onPlayAgain","onNextLevel","isFlipped","isMatched","onClick","cardSize","_c","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport ResultScreen from './ResultScreen';\nconst shuffleArray = (array) => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\nconst generateCards = (difficulty, theme) => {\n  const symbols = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '1', '12', '13', '14', '15', '16'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3;\n  const jokerCount = cardCount % 3;\n\n  let cards = symbols.slice(0, pairsCount).flatMap((symbol) => Array(3).fill(symbol));\n\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  cards = shuffleArray(cards);\n\n  const imageFolderPath = `images/${theme}/`;\n  cards = cards.map((card) => {\n    if (card === 'Joker') {\n      return `/${imageFolderPath}joker.jpeg`;\n    } else {\n      return `/${imageFolderPath}${card}.jpeg`;\n    }\n  });\n\n  return cards;\n};\n\nconst MemoryGame = ({ difficulty, theme }) => {\n  const [totalPairs, setTotalPairs] = useState(difficulty * difficulty / 3);\n  const [diffToPlay, setDiffToPlay] =  useState(difficulty)\n  const [cards, setCards] = useState(generateCards(diffToPlay, theme));\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [initialReveal, setInitialReveal] = useState(true);\n  const [timeLeft, updateTimeLeft] = useState(10);\n  const [currentTurnCount, setTurnCount] = useState(0);\n  const [gameOutcome, setGameOutcome] = useState(null);\n\n  useEffect(() => {\n    setCards(generateCards(diffToPlay, theme));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, diffToPlay > 4 ? 6000 : 3000);\n\n    return () => clearTimeout(revealTimeout);\n  }, [diffToPlay, theme]);\n\n  useEffect(() => {\n    if (!initialReveal && timeLeft > 0) {\n      if (matchedCards.length === totalPairs) {\n        console.log('You win!');\n        setGameOutcome(true);\n      } else {\n        const remainingUnmatchedCards = cards.filter(\n          (symbol, index) =>\n            !flippedCards.includes(index) &&\n            !matchedCards.some((matched) => matched.indexes.includes(index))\n        );\n        if (remainingUnmatchedCards.length === 1 && remainingUnmatchedCards[0] === `/images/${theme}/joker.jpeg`) {\n          console.log('You win! Only the Joker is left.');\n          setGameOutcome(true);\n        }\n      }\n    } else if (!initialReveal && (timeLeft === 0 || timeLeft < 0)) {\n      console.log('You lose!');\n      setGameOutcome(false);\n    }\n  }, [initialReveal, timeLeft, matchedCards, totalPairs, cards, flippedCards]);\n\n  useEffect(() => {\n    if (!initialReveal && timeLeft > 0 && gameOutcome !== true) {\n        const timerInterval = setInterval(() => {\n          if (gameOutcome !== true) {\n            updateTimeLeft((prevTime) => prevTime - 1);\n          }\n        }, 1000);\n        return () => clearInterval(timerInterval);\n    }\n  }, [initialReveal, timeLeft, gameOutcome, matchedCards, totalPairs]);\n  const handleCardClick = (index) => {\n    if (initialReveal || gameOutcome) {\n      return;\n    }\n    // Check if the clicked card is already flipped\n    if (flippedCards.includes(index) || flippedCards.length === 3 || matchedCards.some((matched) => matched.indexes.includes(index))) {\n      return;\n    }\n    // Flip the clicked card\n    setFlippedCards([...flippedCards, index]);\n\n    if (flippedCards.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedCards[0]];\n      const card2 = cards[flippedCards[1]];\n      const card3 = cards[index];\n\n      if (card1 === card2 && card2 === card3) {\n        const matchedContent = [card1, card2, card3];\n        const matchedIndexes = [...flippedCards, index];\n        setMatchedCards((prevMatchedCards) => [\n          ...prevMatchedCards,\n          { content: matchedContent, indexes: matchedIndexes },\n        ]);\n        console.log('cards matched');\n        setFlippedCards([]);\n        setTurnCount(currentTurnCount+1);\n      } else {\n        console.log('cards mismatched');\n        setTurnCount(currentTurnCount+1);\n      }\n\n      setTimeout(() => {\n        setFlippedCards([]);\n      }, 500);\n\n    }\n  };\n\n  const handlePlayAgain = () => {\n    setGameOutcome(null);\n    setTurnCount(0);\n    updateTimeLeft(240);\n    setCards(generateCards(difficulty, theme));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, difficulty > 4 ? 6000 : 3000);\n\n    return () => clearTimeout(revealTimeout);\n  };\n\n  const handleNextLevel = () => {\n    const nextDifficulty = diffToPlay + 1;\n    \n    setGameOutcome(null);\n    setTurnCount(0);\n    updateTimeLeft(240);\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n    setTotalPairs(nextDifficulty * nextDifficulty / 3);\n    setCards(generateCards(nextDifficulty, theme));\n\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, nextDifficulty > 4 ? 6000 : 3000);\n\n    return () => clearTimeout(revealTimeout);\n  };\n  const formattedTime = `${Math.floor(timeLeft / 60)}:${(timeLeft % 60).toLocaleString('en-US', { minimumIntegerDigits: 2 })}`;\n\n  function getGridScale(difficulty) {\n    let baseScale = 0.12\n    switch(difficulty){\n      case 3:\n        baseScale *= 1.6;\n        break;\n      case 4:\n        baseScale *= 1.6;\n        break;\n      case 5:\n        baseScale *= 1.25;\n        break;\n      case 6:\n        baseScale *= 1.11;\n        break;\n      case 7:\n        baseScale *= 0.98;\n        break;\n      default:\n        break;\n    }\n    return Math.min(window.innerWidth * baseScale, 100);\n  }\n\n  return (\n    <>\n    <div className=\"overflow-y-scroll min-h-screen bg-[rgb(18,18,18,0.9)] flex justify-center w-full text-white flex-col\">\n      <div className='w-full h-[10vh]'></div>\n      <div className='w-full h-full flex flex-col justify-center items-center'>\n        <div className='flex flex-col w-full  h-full items-center justify-center overflow-x-hidden'>\n          <div className='flex justify-around w-1/2 max-[425px]:w-full m-4'>\n            {gameOutcome != null && <ResultScreen time={formattedTime} turns={currentTurnCount} gamestate={gameOutcome} pairs={matchedCards.length} onPlayAgain={handlePlayAgain}\n                        onNextLevel={handleNextLevel}/>}\n            <h1>Timer: {formattedTime}</h1>\n            <h1>Turns: {currentTurnCount}</h1>\n            <h1>Theme: {theme}</h1>\n          </div>\n            <div className={`flex items-center justify-center grid grid-cols-${difficulty} gap-3 mb-6 mt-2`}>\n            {cards.map((symbol, index) => (\n              <Card\n                key={index}\n                content={symbol}\n                isFlipped={initialReveal || flippedCards.includes(index) || matchedCards.some((matched) => matched.indexes.includes(index))}\n                isMatched={matchedCards.some((matched) => matched.indexes.includes(index))}\n                onClick={() => handleCardClick(index)}\n                cardSize={getGridScale(difficulty)}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n    </>\n  );\n};\n\nexport default MemoryGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}