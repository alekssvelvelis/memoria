{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\nconst generateCards = difficulty => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap(symbol => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Double the cards to create pairs\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n};\nconst Card = ({\n  content,\n  index,\n  flippedIndices,\n  matchedIndices,\n  onClick\n}) => {\n  const isFlipped = flippedIndices.includes(index) || matchedIndices.includes(index);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `group rounded-xl h-24 w-24 m-4 [perspective:1000px]`,\n    onClick: onClick,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `relative bg-red-500 h-full w-full items-center justify-center flex rounded-xl shadow-xl transition-all text-slate-200 duration-500 [transform-style:preserve-3d] ${isFlipped ? 'group-hover:[transform:rotateY(180deg)]' : ''}`,\n      children: [isFlipped && '', /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `absolute bg-red-500 inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] ${isFlipped ? '[transform:rotateY(180deg)] [backface-visibility:hidden]' : ''}`,\n        children: isFlipped && content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_c = Card;\nconst MemoryGame = ({\n  difficulty\n}) => {\n  _s();\n  const [cards, setCards] = useState(generateCards(difficulty));\n  const [flippedIndices, setFlippedIndices] = useState([]);\n  const [matchedIndices, setMatchedIndices] = useState([]);\n  const [mismatchedIndices, setMismatchedIndices] = useState([]);\n  console.log(flippedIndices);\n  useEffect(() => {\n    // Shuffle the cards when the component mounts or when the game restarts\n    setCards(generateCards(difficulty));\n    setFlippedIndices([]);\n    setMatchedIndices([]);\n    setMismatchedIndices([]);\n  }, [difficulty]);\n  const handleCardClick = index => {\n    // Check if the clicked card is already flipped or already matched\n    if (flippedIndices.includes(index) || matchedIndices.includes(index) || flippedIndices.length === 3) {\n      return;\n    }\n\n    // Flip the clicked card\n    setFlippedIndices([...flippedIndices, index]);\n    if (flippedIndices.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedIndices[0]];\n      const card2 = cards[flippedIndices[1]];\n      const card3 = cards[index];\n      if (card1 === card2 && card2 === card3) {\n        console.log('cards matched');\n        const currentlyMatchedIndices = [flippedIndices[0], flippedIndices[1], index];\n        setMatchedIndices(prevMatchedIndices => [...prevMatchedIndices, ...currentlyMatchedIndices]);\n      } else {\n        console.log('cards mismatched');\n        const currentlyMismatchedIndices = [flippedIndices[0], flippedIndices[1], index];\n        setMismatchedIndices(prevMismatchedIndices => [...prevMismatchedIndices, ...currentlyMismatchedIndices]);\n      }\n\n      // Reset flippedIndices after checking for a match\n      setTimeout(() => {\n        setFlippedIndices([]);\n      }, 1000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-wrap\",\n    children: cards.map((symbol, index) => /*#__PURE__*/_jsxDEV(Card, {\n      content: symbol,\n      index: index,\n      flippedIndices: flippedIndices,\n      matchedIndices: matchedIndices,\n      onClick: () => handleCardClick(index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 3\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryGame, \"VfLCsQPY501BAFU3XJ5bmlZr1nU=\");\n_c2 = MemoryGame;\nexport default MemoryGame;\nvar _c, _c2;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","generateCards","difficulty","symbols","cardCount","pairsCount","jokerCount","cards","slice","flatMap","symbol","Array","fill","concat","Card","content","index","flippedIndices","matchedIndices","onClick","isFlipped","includes","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MemoryGame","_s","setCards","setFlippedIndices","setMatchedIndices","mismatchedIndices","setMismatchedIndices","console","log","handleCardClick","card1","card2","card3","currentlyMatchedIndices","prevMatchedIndices","currentlyMismatchedIndices","prevMismatchedIndices","setTimeout","map","_c2","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst shuffleArray = (array) => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\nconst generateCards = (difficulty) => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap((symbol) => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Double the cards to create pairs\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n};\n\nconst Card = ({ content, index, flippedIndices, matchedIndices, onClick }) => {\n  const isFlipped = flippedIndices.includes(index) || matchedIndices.includes(index);\n\n  return (\n    <div\n      className={`group rounded-xl h-24 w-24 m-4 [perspective:1000px]`}\n      onClick={onClick}\n    >\n      <div className={`relative bg-red-500 h-full w-full items-center justify-center flex rounded-xl shadow-xl transition-all text-slate-200 duration-500 [transform-style:preserve-3d] ${isFlipped ? 'group-hover:[transform:rotateY(180deg)]' : ''}`}>\n        {isFlipped && '' }\n        <div className={`absolute bg-red-500 inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] ${isFlipped ? '[transform:rotateY(180deg)] [backface-visibility:hidden]' : ''}`}>\n          {isFlipped && content}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst MemoryGame = ({ difficulty }) => {\n  const [cards, setCards] = useState(generateCards(difficulty));\n  const [flippedIndices, setFlippedIndices] = useState([]);\n  const [matchedIndices, setMatchedIndices] = useState([]);\n  const [mismatchedIndices, setMismatchedIndices] = useState([]);\n  console.log(flippedIndices);\n\n  useEffect(() => {\n    // Shuffle the cards when the component mounts or when the game restarts\n    setCards(generateCards(difficulty));\n    setFlippedIndices([]);\n    setMatchedIndices([]);\n    setMismatchedIndices([]);\n  }, [difficulty]);\n\n  const handleCardClick = (index) => {\n    // Check if the clicked card is already flipped or already matched\n    if (flippedIndices.includes(index) || matchedIndices.includes(index) || flippedIndices.length === 3) {\n      return;\n    }\n\n    // Flip the clicked card\n    setFlippedIndices([...flippedIndices, index]);\n\n    if (flippedIndices.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedIndices[0]];\n      const card2 = cards[flippedIndices[1]];\n      const card3 = cards[index];\n\n      if (card1 === card2 && card2 === card3) {\n        console.log('cards matched');\n        const currentlyMatchedIndices = [flippedIndices[0], flippedIndices[1], index];\n        setMatchedIndices((prevMatchedIndices) => [...prevMatchedIndices, ...currentlyMatchedIndices]);\n      } else {\n        console.log('cards mismatched');\n        const currentlyMismatchedIndices = [flippedIndices[0], flippedIndices[1], index];\n        setMismatchedIndices((prevMismatchedIndices) => [...prevMismatchedIndices, ...currentlyMismatchedIndices]);\n      }\n\n      // Reset flippedIndices after checking for a match\n      setTimeout(() => {\n        setFlippedIndices([]);\n      }, 1000);\n    }\n  };\n\n  return (\n    <div className='flex flex-wrap'>\n      {cards.map((symbol, index) => (\n  <Card\n    key={index}\n    content={symbol}\n    index={index}\n    flippedIndices={flippedIndices}\n    matchedIndices={matchedIndices}\n    onClick={() => handleCardClick(index)}\n  />\n))}\n    </div>\n  );\n};\n\nexport default MemoryGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}