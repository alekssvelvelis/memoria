{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\nconst generateCards = difficulty => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap(symbol => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Double the cards to create pairs\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n};\nconst Card = ({\n  content,\n  isFlipped,\n  isFirstFlip,\n  initialReveal,\n  onClick\n}) => {\n  return (\n    /*#__PURE__*/\n    // <div className='group rounded-xl h-48 w-48 [perspective:1000px]'>\n    //     <div className=\"relative h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] group-hover:[transform:rotateY(180deg)]\">\n    //         <div className='absolute inset-0'>\n    //             {/* <div className='h-full w-full rounded-xl object-cover shadow-xl shadow-black/40' >{content}</div> */}\n    //             <img className='w-full h-full rounded-xl object-cover shadow-xl shadow-black/40' src=\"https://i.loli.net/2019/10/18/buDT4YS6zUMfHst.jpg\" />\n    //         </div>\n    //         <div className=\"absolute inset-0 w-full h-full rounded-xl object-cover text-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden]\">\n    //             <img className='w-screen h-full rounded-xl' src=\"https://i.loli.net/2019/11/16/FLnzi5Kq4tkRZSm.jpg\" />\n    //         </div>\n    //     </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      className: `group rounded-xl h-24 w-24 m-4 [perspective:1000px]`,\n      onClick: onClick,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `relative bg-red-500 h-full w-full items-center justify-center flex rounded-xl shadow-xl transition-all text-slate-200 duration-500 [transform-style:preserve-3d] ${isFirstFlip ? 'transform rotateY(180deg)' : isFlipped ? 'transform rotateY(180deg)' : ''}`,\n        children: [initialReveal || isFlipped ? content : '', /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute bg-red-500 inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] [backface-visibility:hidden] ${isFirstFlip ? 'transform rotateY(180deg)' : isFlipped ? 'transform rotateY(180deg)' : ''}`,\n          children: isFlipped && !initialReveal ? content : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c = Card;\nconst MemoryGame = ({\n  difficulty\n}) => {\n  _s();\n  const [cards, setCards] = useState(generateCards(difficulty));\n  const [flippedIndices, setFlippedIndices] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [initialReveal, setInitialReveal] = useState(true); // New state\n  console.log(flippedIndices);\n  useEffect(() => {\n    // Shuffle the cards when the component mounts or when the game restarts\n    setCards(generateCards(difficulty));\n    setFlippedIndices([]);\n\n    // Start initial reveal\n    setInitialReveal(true);\n\n    // After 3 seconds, flip the cards and end initial reveal\n    setTimeout(() => {\n      setInitialReveal(false);\n    }, 3000);\n  }, [difficulty]);\n  const handleCardClick = index => {\n    // Check if the clicked card is already flipped or during initial reveal\n    if (flippedIndices.includes(index) || initialReveal || flippedIndices.length === 3) {\n      return;\n    }\n\n    // Flip the clicked card\n    setFlippedIndices([...flippedIndices, index]);\n    if (flippedIndices.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedIndices[0]];\n      const card2 = cards[flippedIndices[1]];\n      const card3 = cards[index];\n      if (card1 === card2 && card2 === card3) {\n        const currentlyMatchedCards = [card1, card2, card3];\n        setMatchedCards(prevMatchedCards => [...prevMatchedCards, currentlyMatchedCards]);\n        console.log('cards matched');\n      } else {\n        console.log('cards mismatched');\n        // Reset flippedIndices after checking for a mismatch\n        setTimeout(() => {\n          setFlippedIndices([]);\n        }, 1000);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-wrap\",\n    children: cards.map((symbol, index) => /*#__PURE__*/_jsxDEV(Card, {\n      content: symbol,\n      isFlipped: flippedIndices.includes(index),\n      isFirstFlip: !flippedIndices.includes(index) && flippedIndices.length < 2,\n      onClick: () => handleCardClick(index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 108,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryGame, \"q/Y7OOaGVVT9ze+B1N6VMQVTWU4=\");\n_c2 = MemoryGame;\nexport default MemoryGame;\nvar _c, _c2;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","generateCards","difficulty","symbols","cardCount","pairsCount","jokerCount","cards","slice","flatMap","symbol","Array","fill","concat","Card","content","isFlipped","isFirstFlip","initialReveal","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MemoryGame","_s","setCards","flippedIndices","setFlippedIndices","matchedCards","setMatchedCards","setInitialReveal","console","log","setTimeout","handleCardClick","index","includes","card1","card2","card3","currentlyMatchedCards","prevMatchedCards","map","_c2","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst shuffleArray = (array) => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\nconst generateCards = (difficulty) => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap((symbol) => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Double the cards to create pairs\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n};\n\nconst Card = ({ content, isFlipped, isFirstFlip, initialReveal, onClick }) => {\n  return (\n    // <div className='group rounded-xl h-48 w-48 [perspective:1000px]'>\n    //     <div className=\"relative h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] group-hover:[transform:rotateY(180deg)]\">\n    //         <div className='absolute inset-0'>\n    //             {/* <div className='h-full w-full rounded-xl object-cover shadow-xl shadow-black/40' >{content}</div> */}\n    //             <img className='w-full h-full rounded-xl object-cover shadow-xl shadow-black/40' src=\"https://i.loli.net/2019/10/18/buDT4YS6zUMfHst.jpg\" />\n    //         </div>\n    //         <div className=\"absolute inset-0 w-full h-full rounded-xl object-cover text-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden]\">\n    //             <img className='w-screen h-full rounded-xl' src=\"https://i.loli.net/2019/11/16/FLnzi5Kq4tkRZSm.jpg\" />\n    //         </div>\n    //     </div>\n    // </div>\n    <div\n      className={`group rounded-xl h-24 w-24 m-4 [perspective:1000px]`}\n      onClick={onClick}\n    >\n      <div className={`relative bg-red-500 h-full w-full items-center justify-center flex rounded-xl shadow-xl transition-all text-slate-200 duration-500 [transform-style:preserve-3d] ${isFirstFlip ? 'transform rotateY(180deg)' : isFlipped ? 'transform rotateY(180deg)' : ''}`}>\n        {initialReveal || isFlipped ? content : ''}\n        <div className={`absolute bg-red-500 inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] [backface-visibility:hidden] ${isFirstFlip ? 'transform rotateY(180deg)' : isFlipped ? 'transform rotateY(180deg)' : ''}`}>\n          {isFlipped && !initialReveal ? content : ''}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst MemoryGame = ({ difficulty }) => {\n  const [cards, setCards] = useState(generateCards(difficulty));\n  const [flippedIndices, setFlippedIndices] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [initialReveal, setInitialReveal] = useState(true); // New state\n  console.log(flippedIndices);\n  useEffect(() => {\n    // Shuffle the cards when the component mounts or when the game restarts\n    setCards(generateCards(difficulty));\n    setFlippedIndices([]);\n\n    // Start initial reveal\n    setInitialReveal(true);\n\n    // After 3 seconds, flip the cards and end initial reveal\n    setTimeout(() => {\n      setInitialReveal(false);\n    }, 3000);\n  }, [difficulty]);\n\n  const handleCardClick = (index) => {\n    // Check if the clicked card is already flipped or during initial reveal\n    if (flippedIndices.includes(index) || initialReveal || flippedIndices.length === 3) {\n      return;\n    }\n\n    // Flip the clicked card\n    setFlippedIndices([...flippedIndices, index]);\n\n    if (flippedIndices.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedIndices[0]];\n      const card2 = cards[flippedIndices[1]];\n      const card3 = cards[index];\n\n      if (card1 === card2 && card2 === card3) {\n        const currentlyMatchedCards = [card1, card2, card3];\n        setMatchedCards((prevMatchedCards) => [...prevMatchedCards, currentlyMatchedCards]);\n        console.log('cards matched');\n      } else {\n        console.log('cards mismatched');\n        // Reset flippedIndices after checking for a mismatch\n        setTimeout(() => {\n          setFlippedIndices([]);\n        }, 1000);\n      }\n    }\n  };\n  \n\n  return (\n    <div className='flex flex-wrap'>\n      {cards.map((symbol, index) => (\n        <Card\n          key={index}\n          content={symbol}\n          isFlipped={flippedIndices.includes(index)}\n          isFirstFlip={!flippedIndices.includes(index) && flippedIndices.length < 2}\n          onClick={() => handleCardClick(index)}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default MemoryGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}