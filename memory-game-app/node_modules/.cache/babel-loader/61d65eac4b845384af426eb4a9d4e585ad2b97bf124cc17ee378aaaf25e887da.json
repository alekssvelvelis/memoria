{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\nconst generateContentPairs = difficulty => {\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols and add joker cards\n  let cards = Array(pairsCount).flatMap((_, index) => [{\n    symbol: `Symbol ${index + 1}`,\n    letter: '',\n    isJoker: false\n  }, {\n    symbol: `Symbol ${index + 1}`,\n    letter: '',\n    isJoker: false\n  }, {\n    symbol: `Symbol ${index + 1}`,\n    letter: '',\n    isJoker: false\n  }]);\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill({\n    symbol: 'Joker',\n    letter: '',\n    isJoker: true\n  }));\n\n  // Double the cards to create pairs\n  cards = cards.concat(cards);\n\n  // Shuffle the cards\n  cards = shuffleArray(cards);\n\n  // Add letters for the back of each card\n  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.slice(0, cardCount);\n  cards = cards.map((card, index) => ({\n    ...card,\n    letter: letters[index]\n  }));\n  return cards;\n};\nconst Card = ({\n  content,\n  isFlipped,\n  onClick\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `group rounded-xl h-24 w-24 m-4 [perspective:1000px]`,\n    onClick: onClick,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `relative bg-red-500 h-full w-full items-center justify-center flex  rounded-xl shadow-xl transition-all text-slate-200 duration-500 [transform-style:preserve-3d] ${isFlipped ? 'group-hover:[transform:rotateY(180deg)]' : ''}`,\n      children: [isFlipped && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] [transform:rotateY(180deg)] [backface-visibility:hidden]\",\n        children: content.letter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `absolute bg-red-500 inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] ${isFlipped ? '[transform:rotateY(180deg)] [backface-visibility:hidden]' : ''}`,\n        children: isFlipped && content.symbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_c = Card;\nconst MemoryGame = ({\n  difficulty\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState([]);\n  const handleCardClick = id => {\n    if (flippedIndexes.length < 3 && !flippedIndexes.includes(id)) {\n      setCards(prevCards => prevCards.map(row => row.map(card => card.id === id ? {\n        ...card,\n        isFlipped: !card.isFlipped\n      } : card)));\n      setFlippedIndexes(prevIndexes => [...prevIndexes, id]);\n    }\n  };\n  useEffect(() => {\n    const gridSize = difficulty; // Set the grid size (minimum 3, maximum 6)\n\n    const contentPairs = generateContentPairs(difficulty);\n    const shuffledContent = shuffleArray(contentPairs);\n    const initialCards = Array.from({\n      length: gridSize\n    }, (_, row) => Array.from({\n      length: gridSize\n    }, (_, col) => ({\n      id: `${row}-${col}`,\n      content: shuffledContent[row * gridSize + col],\n      isFlipped: false\n    })));\n    setCards(initialCards);\n  }, [difficulty]);\n  useEffect(() => {\n    if (flippedIndexes.length === 3) {\n      const selectedCards = flippedIndexes.map(index => {\n        const [row, col] = index.split('-');\n        return cards[row][col];\n      });\n      if (selectedCards.every((card, _, array) => card.content.symbol === array[0].content.symbol)) {\n        setMatchedPairs(prevPairs => [...prevPairs, selectedCards[0].content.symbol]);\n      }\n      setTimeout(() => {\n        setFlippedIndexes([]);\n        setCards(prevCards => prevCards.map(row => row.map(card => flippedIndexes.includes(card.id) ? {\n          ...card,\n          isFlipped: false\n        } : card)));\n      }, 1000);\n    }\n  }, [flippedIndexes, cards]);\n  useEffect(() => {\n    if (matchedPairs.length === difficulty * difficulty / 3) {\n      alert('Congratulations! You have won!');\n    }\n  }, [matchedPairs, difficulty]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-wrap justify-center\",\n    children: cards.map((row, rowIndex) => row.map((card, colIndex) => /*#__PURE__*/_jsxDEV(Card, {\n      content: card.isFlipped ? card.content : '',\n      isFlipped: card.isFlipped,\n      onClick: () => handleCardClick(card.id)\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 131,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryGame, \"ay07tD+NrC5N8SkyTC2PH0ai9BY=\");\n_c2 = MemoryGame;\nexport default MemoryGame;\nvar _c, _c2;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","generateContentPairs","difficulty","cardCount","pairsCount","jokerCount","cards","Array","flatMap","_","index","symbol","letter","isJoker","concat","fill","letters","slice","map","card","Card","content","isFlipped","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MemoryGame","_s","setCards","flippedIndexes","setFlippedIndexes","matchedPairs","setMatchedPairs","handleCardClick","id","includes","prevCards","row","prevIndexes","gridSize","contentPairs","shuffledContent","initialCards","from","col","selectedCards","split","every","prevPairs","setTimeout","alert","rowIndex","colIndex","_c2","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst shuffleArray = (array) => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\nconst generateContentPairs = (difficulty) => {\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols and add joker cards\n  let cards = Array(pairsCount).flatMap((_, index) => [\n    { symbol: `Symbol ${index + 1}`, letter: '', isJoker: false },\n    { symbol: `Symbol ${index + 1}`, letter: '', isJoker: false },\n    { symbol: `Symbol ${index + 1}`, letter: '', isJoker: false },\n  ]);\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill({ symbol: 'Joker', letter: '', isJoker: true }));\n\n  // Double the cards to create pairs\n  cards = cards.concat(cards);\n\n  // Shuffle the cards\n  cards = shuffleArray(cards);\n\n  // Add letters for the back of each card\n  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.slice(0, cardCount);\n  cards = cards.map((card, index) => ({ ...card, letter: letters[index] }));\n\n  return cards;\n};\n\n\nconst Card = ({ content, isFlipped, onClick }) => {\n  return (\n    <div\n      className={`group rounded-xl h-24 w-24 m-4 [perspective:1000px]`}\n      onClick={onClick}\n    >\n      <div className={`relative bg-red-500 h-full w-full items-center justify-center flex  rounded-xl shadow-xl transition-all text-slate-200 duration-500 [transform-style:preserve-3d] ${isFlipped ? 'group-hover:[transform:rotateY(180deg)]' : ''}`}>\n        {isFlipped && <div className=\"absolute inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] [transform:rotateY(180deg)] [backface-visibility:hidden]\">{content.letter}</div>}\n        <div className={`absolute bg-red-500 inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] ${isFlipped ? '[transform:rotateY(180deg)] [backface-visibility:hidden]' : ''}`}>\n          {isFlipped && content.symbol}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst MemoryGame = ({ difficulty }) => {\n  const [cards, setCards] = useState([]);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState([]);\n\n  const handleCardClick = (id) => {\n    if (flippedIndexes.length < 3 && !flippedIndexes.includes(id)) {\n      setCards((prevCards) =>\n        prevCards.map((row) =>\n          row.map((card) =>\n            card.id === id\n              ? { ...card, isFlipped: !card.isFlipped }\n              : card\n          )\n        )\n      );\n      setFlippedIndexes((prevIndexes) => [...prevIndexes, id]);\n    }\n  };\n\n  useEffect(() => {\n    const gridSize = difficulty; // Set the grid size (minimum 3, maximum 6)\n\n    const contentPairs = generateContentPairs(difficulty);\n    const shuffledContent = shuffleArray(contentPairs);\n\n    const initialCards = Array.from({ length: gridSize }, (_, row) =>\n      Array.from({ length: gridSize }, (_, col) => ({\n        id: `${row}-${col}`,\n        content: shuffledContent[row * gridSize + col],\n        isFlipped: false,\n      }))\n    );\n\n    setCards(initialCards);\n  }, [difficulty]);\n\n  useEffect(() => {\n    if (flippedIndexes.length === 3) {\n      const selectedCards = flippedIndexes.map((index) => {\n        const [row, col] = index.split('-');\n        return cards[row][col];\n      });\n\n      if (\n        selectedCards.every(\n          (card, _, array) => card.content.symbol === array[0].content.symbol\n        )\n      ) {\n        setMatchedPairs((prevPairs) => [...prevPairs, selectedCards[0].content.symbol]);\n      }\n\n      setTimeout(() => {\n        setFlippedIndexes([]);\n        setCards((prevCards) =>\n          prevCards.map((row) =>\n            row.map((card) =>\n              flippedIndexes.includes(card.id)\n                ? { ...card, isFlipped: false }\n                : card\n            )\n          )\n        );\n      }, 1000);\n    }\n  }, [flippedIndexes, cards]);\n\n  useEffect(() => {\n    if (matchedPairs.length === difficulty * difficulty / 3) {\n      alert('Congratulations! You have won!');\n    }\n  }, [matchedPairs, difficulty]);\n\n  return (\n    <div className=\"flex flex-wrap justify-center\">\n      {cards.map((row, rowIndex) =>\n        row.map((card, colIndex) => (\n          <Card\n            key={card.id}\n            content={card.isFlipped ? card.content : ''}\n            isFlipped={card.isFlipped}\n            onClick={() => handleCardClick(card.id)}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MemoryGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}