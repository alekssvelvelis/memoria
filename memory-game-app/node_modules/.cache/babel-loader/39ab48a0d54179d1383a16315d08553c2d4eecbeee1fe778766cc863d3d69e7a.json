{"ast":null,"code":"import React,{useState,useEffect}from'react';import Card from'./Card';import ResultScreen from'./ResultScreen';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const shuffleArray=array=>{const shuffledArray=[...array];for(let i=shuffledArray.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[shuffledArray[i],shuffledArray[j]]=[shuffledArray[j],shuffledArray[i]];}return shuffledArray;};const generateCards=(difficulty,theme)=>{const symbols=['1','2','3','4','5','6','7','8','9','10','1','12','13','14','15','16'];const cardCount=difficulty*difficulty;const pairsCount=cardCount/3;const jokerCount=cardCount%3;let cards=symbols.slice(0,pairsCount).flatMap(symbol=>Array(3).fill(symbol));cards=cards.concat(Array(jokerCount).fill('Joker'));cards=shuffleArray(cards);const imageFolderPath=\"images/\".concat(theme,\"/\");cards=cards.map(card=>{if(card==='Joker'){return\"/\".concat(imageFolderPath,\"joker.jpeg\");}else{return\"/\".concat(imageFolderPath).concat(card,\".jpeg\");}});return cards;};const MemoryGame=_ref=>{let{difficulty,theme}=_ref;const[totalPairs,setTotalPairs]=useState(difficulty*difficulty/3);const[diffToPlay,setDiffToPlay]=useState(difficulty);const[cards,setCards]=useState(generateCards(diffToPlay,theme));const[flippedCards,setFlippedCards]=useState([]);const[matchedCards,setMatchedCards]=useState([]);const[initialReveal,setInitialReveal]=useState(true);const[timeLeft,updateTimeLeft]=useState(10);const[currentTurnCount,setTurnCount]=useState(0);const[gameOutcome,setGameOutcome]=useState(null);useEffect(()=>{setCards(generateCards(diffToPlay,theme));setFlippedCards([]);setMatchedCards([]);setInitialReveal(true);const revealTimeout=setTimeout(()=>{setInitialReveal(false);},diffToPlay>4?6000:3000);return()=>clearTimeout(revealTimeout);},[diffToPlay,theme]);useEffect(()=>{if(!initialReveal&&timeLeft>0){if(matchedCards.length===totalPairs){console.log('You win!');setGameOutcome(true);}else{const remainingUnmatchedCards=cards.filter((symbol,index)=>!flippedCards.includes(index)&&!matchedCards.some(matched=>matched.indexes.includes(index)));if(remainingUnmatchedCards.length===1&&remainingUnmatchedCards[0]===\"/images/\".concat(theme,\"/joker.jpeg\")){console.log('You win! Only the Joker is left.');setGameOutcome(true);}}}else if(!initialReveal&&(timeLeft===0||timeLeft<0)){console.log('You lose!');setGameOutcome(false);}},[initialReveal,timeLeft,matchedCards,totalPairs,cards,flippedCards]);useEffect(()=>{if(!initialReveal&&timeLeft>0&&gameOutcome!==true){const timerInterval=setInterval(()=>{if(gameOutcome!==true){updateTimeLeft(prevTime=>prevTime-1);}},1000);return()=>clearInterval(timerInterval);}},[initialReveal,timeLeft,gameOutcome,matchedCards,totalPairs]);const handleCardClick=index=>{if(initialReveal||gameOutcome){return;}// Check if the clicked card is already flipped\nif(flippedCards.includes(index)||flippedCards.length===3||matchedCards.some(matched=>matched.indexes.includes(index))){return;}// Flip the clicked card\nsetFlippedCards([...flippedCards,index]);if(flippedCards.length===2){// Check for a match\nconst card1=cards[flippedCards[0]];const card2=cards[flippedCards[1]];const card3=cards[index];if(card1===card2&&card2===card3){const matchedContent=[card1,card2,card3];const matchedIndexes=[...flippedCards,index];setMatchedCards(prevMatchedCards=>[...prevMatchedCards,{content:matchedContent,indexes:matchedIndexes}]);console.log('cards matched');setFlippedCards([]);setTurnCount(currentTurnCount+1);}else{console.log('cards mismatched');setTurnCount(currentTurnCount+1);}setTimeout(()=>{setFlippedCards([]);},500);}};const handlePlayAgain=()=>{setGameOutcome(null);setTurnCount(0);updateTimeLeft(240);setCards(generateCards(difficulty,theme));setFlippedCards([]);setMatchedCards([]);setInitialReveal(true);const revealTimeout=setTimeout(()=>{setInitialReveal(false);},difficulty>4?6000:3000);return()=>clearTimeout(revealTimeout);};const handleNextLevel=()=>{const nextDifficulty=diffToPlay+1;setDiffToPlay(nextDifficulty);setGameOutcome(null);setTurnCount(0);updateTimeLeft(240);setFlippedCards([]);setMatchedCards([]);setInitialReveal(true);setTotalPairs(nextDifficulty*nextDifficulty/3);setCards(generateCards(nextDifficulty,theme));const revealTimeout=setTimeout(()=>{setInitialReveal(false);},nextDifficulty>4?6000:3000);return()=>clearTimeout(revealTimeout);};const formattedTime=\"\".concat(Math.floor(timeLeft/60),\":\").concat((timeLeft%60).toLocaleString('en-US',{minimumIntegerDigits:2}));function getGridScale(difficulty){let baseScale=0.12;switch(difficulty){case 3:baseScale*=1.6;break;case 4:baseScale*=1.6;break;case 5:baseScale*=1.25;break;case 6:baseScale*=1.11;break;case 7:baseScale*=0.98;break;default:break;}return Math.min(window.innerWidth*baseScale,100);}return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"overflow-y-scroll min-h-screen bg-[rgb(18,18,18,0.9)] flex justify-center w-full text-white flex-col\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-[10vh]\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-full flex flex-col justify-center items-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col w-full  h-full items-center justify-center overflow-x-hidden\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"flex justify-around w-1/2 max-[425px]:w-full m-4\",children:[gameOutcome!=null&&/*#__PURE__*/_jsx(ResultScreen,{time:formattedTime,turns:currentTurnCount,gamestate:gameOutcome,pairs:matchedCards.length,onPlayAgain:handlePlayAgain,onNextLevel:handleNextLevel}),/*#__PURE__*/_jsxs(\"h1\",{children:[\"Timer: \",formattedTime]}),/*#__PURE__*/_jsxs(\"h1\",{children:[\"Turns: \",currentTurnCount]}),/*#__PURE__*/_jsxs(\"h1\",{children:[\"Theme: \",theme]})]}),/*#__PURE__*/_jsx(\"div\",{className:\"flex items-center justify-center grid grid-cols-\".concat(diffToPlay,\" gap-3 mb-6 mt-2\"),children:cards.map((symbol,index)=>/*#__PURE__*/_jsx(Card,{content:symbol,isFlipped:initialReveal||flippedCards.includes(index)||matchedCards.some(matched=>matched.indexes.includes(index)),isMatched:matchedCards.some(matched=>matched.indexes.includes(index)),onClick:()=>handleCardClick(index),cardSize:getGridScale(difficulty)},index))})]})})]})});};export default MemoryGame;","map":{"version":3,"names":["React","useState","useEffect","Card","ResultScreen","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","generateCards","difficulty","theme","symbols","cardCount","pairsCount","jokerCount","cards","slice","flatMap","symbol","Array","fill","concat","imageFolderPath","map","card","MemoryGame","_ref","totalPairs","setTotalPairs","diffToPlay","setDiffToPlay","setCards","flippedCards","setFlippedCards","matchedCards","setMatchedCards","initialReveal","setInitialReveal","timeLeft","updateTimeLeft","currentTurnCount","setTurnCount","gameOutcome","setGameOutcome","revealTimeout","setTimeout","clearTimeout","console","log","remainingUnmatchedCards","filter","index","includes","some","matched","indexes","timerInterval","setInterval","prevTime","clearInterval","handleCardClick","card1","card2","card3","matchedContent","matchedIndexes","prevMatchedCards","content","handlePlayAgain","handleNextLevel","nextDifficulty","formattedTime","toLocaleString","minimumIntegerDigits","getGridScale","baseScale","min","window","innerWidth","children","className","time","turns","gamestate","pairs","onPlayAgain","onNextLevel","isFlipped","isMatched","onClick","cardSize"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport ResultScreen from './ResultScreen';\nconst shuffleArray = (array) => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\nconst generateCards = (difficulty, theme) => {\n  const symbols = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '1', '12', '13', '14', '15', '16'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3;\n  const jokerCount = cardCount % 3;\n\n  let cards = symbols.slice(0, pairsCount).flatMap((symbol) => Array(3).fill(symbol));\n\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  cards = shuffleArray(cards);\n\n  const imageFolderPath = `images/${theme}/`;\n  cards = cards.map((card) => {\n    if (card === 'Joker') {\n      return `/${imageFolderPath}joker.jpeg`;\n    } else {\n      return `/${imageFolderPath}${card}.jpeg`;\n    }\n  });\n\n  return cards;\n};\n\nconst MemoryGame = ({ difficulty, theme }) => {\n  const [totalPairs, setTotalPairs] = useState(difficulty * difficulty / 3);\n  const [diffToPlay, setDiffToPlay] =  useState(difficulty)\n  const [cards, setCards] = useState(generateCards(diffToPlay, theme));\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [initialReveal, setInitialReveal] = useState(true);\n  const [timeLeft, updateTimeLeft] = useState(10);\n  const [currentTurnCount, setTurnCount] = useState(0);\n  const [gameOutcome, setGameOutcome] = useState(null);\n\n  useEffect(() => {\n    setCards(generateCards(diffToPlay, theme));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, diffToPlay > 4 ? 6000 : 3000);\n\n    return () => clearTimeout(revealTimeout);\n  }, [diffToPlay, theme]);\n\n  useEffect(() => {\n    if (!initialReveal && timeLeft > 0) {\n      if (matchedCards.length === totalPairs) {\n        console.log('You win!');\n        setGameOutcome(true);\n      } else {\n        const remainingUnmatchedCards = cards.filter(\n          (symbol, index) =>\n            !flippedCards.includes(index) &&\n            !matchedCards.some((matched) => matched.indexes.includes(index))\n        );\n        if (remainingUnmatchedCards.length === 1 && remainingUnmatchedCards[0] === `/images/${theme}/joker.jpeg`) {\n          console.log('You win! Only the Joker is left.');\n          setGameOutcome(true);\n        }\n      }\n    } else if (!initialReveal && (timeLeft === 0 || timeLeft < 0)) {\n      console.log('You lose!');\n      setGameOutcome(false);\n    }\n  }, [initialReveal, timeLeft, matchedCards, totalPairs, cards, flippedCards]);\n\n  useEffect(() => {\n    if (!initialReveal && timeLeft > 0 && gameOutcome !== true) {\n        const timerInterval = setInterval(() => {\n          if (gameOutcome !== true) {\n            updateTimeLeft((prevTime) => prevTime - 1);\n          }\n        }, 1000);\n        return () => clearInterval(timerInterval);\n    }\n  }, [initialReveal, timeLeft, gameOutcome, matchedCards, totalPairs]);\n  const handleCardClick = (index) => {\n    if (initialReveal || gameOutcome) {\n      return;\n    }\n    // Check if the clicked card is already flipped\n    if (flippedCards.includes(index) || flippedCards.length === 3 || matchedCards.some((matched) => matched.indexes.includes(index))) {\n      return;\n    }\n    // Flip the clicked card\n    setFlippedCards([...flippedCards, index]);\n\n    if (flippedCards.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedCards[0]];\n      const card2 = cards[flippedCards[1]];\n      const card3 = cards[index];\n\n      if (card1 === card2 && card2 === card3) {\n        const matchedContent = [card1, card2, card3];\n        const matchedIndexes = [...flippedCards, index];\n        setMatchedCards((prevMatchedCards) => [\n          ...prevMatchedCards,\n          { content: matchedContent, indexes: matchedIndexes },\n        ]);\n        console.log('cards matched');\n        setFlippedCards([]);\n        setTurnCount(currentTurnCount+1);\n      } else {\n        console.log('cards mismatched');\n        setTurnCount(currentTurnCount+1);\n      }\n\n      setTimeout(() => {\n        setFlippedCards([]);\n      }, 500);\n\n    }\n  };\n\n  const handlePlayAgain = () => {\n    setGameOutcome(null);\n    setTurnCount(0);\n    updateTimeLeft(240);\n    setCards(generateCards(difficulty, theme));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, difficulty > 4 ? 6000 : 3000);\n\n    return () => clearTimeout(revealTimeout);\n  };\n\n  const handleNextLevel = () => {\n    const nextDifficulty = diffToPlay + 1;\n    setDiffToPlay(nextDifficulty);\n    setGameOutcome(null);\n    setTurnCount(0);\n    updateTimeLeft(240);\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n    setTotalPairs(nextDifficulty * nextDifficulty / 3);\n    setCards(generateCards(nextDifficulty, theme));\n\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, nextDifficulty > 4 ? 6000 : 3000);\n\n    return () => clearTimeout(revealTimeout);\n  };\n  const formattedTime = `${Math.floor(timeLeft / 60)}:${(timeLeft % 60).toLocaleString('en-US', { minimumIntegerDigits: 2 })}`;\n\n  function getGridScale(difficulty) {\n    let baseScale = 0.12\n    switch(difficulty){\n      case 3:\n        baseScale *= 1.6;\n        break;\n      case 4:\n        baseScale *= 1.6;\n        break;\n      case 5:\n        baseScale *= 1.25;\n        break;\n      case 6:\n        baseScale *= 1.11;\n        break;\n      case 7:\n        baseScale *= 0.98;\n        break;\n      default:\n        break;\n    }\n    return Math.min(window.innerWidth * baseScale, 100);\n  }\n\n  return (\n    <>\n    <div className=\"overflow-y-scroll min-h-screen bg-[rgb(18,18,18,0.9)] flex justify-center w-full text-white flex-col\">\n      <div className='w-full h-[10vh]'></div>\n      <div className='w-full h-full flex flex-col justify-center items-center'>\n        <div className='flex flex-col w-full  h-full items-center justify-center overflow-x-hidden'>\n          <div className='flex justify-around w-1/2 max-[425px]:w-full m-4'>\n            {gameOutcome != null && <ResultScreen time={formattedTime} turns={currentTurnCount} gamestate={gameOutcome} pairs={matchedCards.length} onPlayAgain={handlePlayAgain}\n                        onNextLevel={handleNextLevel}/>}\n            <h1>Timer: {formattedTime}</h1>\n            <h1>Turns: {currentTurnCount}</h1>\n            <h1>Theme: {theme}</h1>\n          </div>\n            <div className={`flex items-center justify-center grid grid-cols-${diffToPlay} gap-3 mb-6 mt-2`}>\n            {cards.map((symbol, index) => (\n              <Card\n                key={index}\n                content={symbol}\n                isFlipped={initialReveal || flippedCards.includes(index) || matchedCards.some((matched) => matched.indexes.includes(index))}\n                isMatched={matchedCards.some((matched) => matched.indexes.includes(index))}\n                onClick={() => handleCardClick(index)}\n                cardSize={getGridScale(difficulty)}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n    </>\n  );\n};\n\nexport default MemoryGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}