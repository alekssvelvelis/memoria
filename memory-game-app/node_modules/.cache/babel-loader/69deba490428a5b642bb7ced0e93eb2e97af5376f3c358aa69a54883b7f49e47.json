{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/GameBoard.jsx\";\nimport React from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  cards,\n  flippedCards,\n  matchedCards,\n  initialReveal,\n  difficulty,\n  handleCardClick,\n  gameEnded\n}) => {\n  function getGridScale(difficulty) {\n    let baseScale = 0.12;\n    switch (difficulty) {\n      case 3:\n        baseScale *= 1.6;\n        break;\n      case 4:\n        baseScale *= 1.6;\n        break;\n      case 5:\n        baseScale *= 1.25;\n        break;\n      case 6:\n        baseScale *= 1.11;\n        break;\n      case 7:\n        baseScale *= 0.9;\n        break;\n      default:\n        break;\n    }\n    return Math.min(window.innerWidth * baseScale, 100);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `flex items-center justify-center grid grid-cols-${difficulty} gap-3 mb-6 mt-2`,\n    children: cards.map((symbol, index) => /*#__PURE__*/_jsxDEV(Card, {\n      content: symbol,\n      isFlipped: initialReveal || flippedCards.includes(index) || matchedCards.some(matched => matched.indexes.includes(index)),\n      isMatched: matchedCards.some(matched => matched.indexes.includes(index)),\n      onClick: () => handleCardClick(index),\n      cardSize: getGridScale(difficulty),\n      gameEnded: gameEnded,\n      index: index\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","Card","jsxDEV","_jsxDEV","GameBoard","cards","flippedCards","matchedCards","initialReveal","difficulty","handleCardClick","gameEnded","getGridScale","baseScale","Math","min","window","innerWidth","className","children","map","symbol","index","content","isFlipped","includes","some","matched","indexes","isMatched","onClick","cardSize","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/GameBoard.jsx"],"sourcesContent":["import React from 'react';\nimport Card from './Card';\n\nconst GameBoard = ({ cards, flippedCards, matchedCards, initialReveal, difficulty, handleCardClick, gameEnded }) => {\n    function getGridScale(difficulty) {\n        let baseScale = 0.12\n        switch(difficulty){\n          case 3:\n            baseScale *= 1.6;\n            break;\n          case 4:\n            baseScale *= 1.6;\n            break;\n          case 5:\n            baseScale *= 1.25;\n            break;\n          case 6:\n            baseScale *= 1.11;\n            break;\n          case 7:\n            baseScale *= 0.9;\n            break;\n          default:\n            break;\n        }\n        return Math.min(window.innerWidth * baseScale, 100);\n    }\n  return (\n    <div className={`flex items-center justify-center grid grid-cols-${difficulty} gap-3 mb-6 mt-2`}>\n      {cards.map((symbol, index) => (\n        <Card\n          key={index}\n          content={symbol}\n          isFlipped={initialReveal || flippedCards.includes(index) || matchedCards.some((matched) => matched.indexes.includes(index))}\n          isMatched={matchedCards.some((matched) => matched.indexes.includes(index))}\n          onClick={() => handleCardClick(index)}\n          cardSize={getGridScale(difficulty)}\n          gameEnded={gameEnded}\n          index={index}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default GameBoard;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAC;EAAEC,KAAK;EAAEC,YAAY;EAAEC,YAAY;EAAEC,aAAa;EAAEC,UAAU;EAAEC,eAAe;EAAEC;AAAU,CAAC,KAAK;EAChH,SAASC,YAAYA,CAACH,UAAU,EAAE;IAC9B,IAAII,SAAS,GAAG,IAAI;IACpB,QAAOJ,UAAU;MACf,KAAK,CAAC;QACJI,SAAS,IAAI,GAAG;QAChB;MACF,KAAK,CAAC;QACJA,SAAS,IAAI,GAAG;QAChB;MACF,KAAK,CAAC;QACJA,SAAS,IAAI,IAAI;QACjB;MACF,KAAK,CAAC;QACJA,SAAS,IAAI,IAAI;QACjB;MACF,KAAK,CAAC;QACJA,SAAS,IAAI,GAAG;QAChB;MACF;QACE;IACJ;IACA,OAAOC,IAAI,CAACC,GAAG,CAACC,MAAM,CAACC,UAAU,GAAGJ,SAAS,EAAE,GAAG,CAAC;EACvD;EACF,oBACEV,OAAA;IAAKe,SAAS,EAAG,mDAAkDT,UAAW,kBAAkB;IAAAU,QAAA,EAC7Fd,KAAK,CAACe,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACvBnB,OAAA,CAACF,IAAI;MAEHsB,OAAO,EAAEF,MAAO;MAChBG,SAAS,EAAEhB,aAAa,IAAIF,YAAY,CAACmB,QAAQ,CAACH,KAAK,CAAC,IAAIf,YAAY,CAACmB,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,OAAO,CAACH,QAAQ,CAACH,KAAK,CAAC,CAAE;MAC5HO,SAAS,EAAEtB,YAAY,CAACmB,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,OAAO,CAACH,QAAQ,CAACH,KAAK,CAAC,CAAE;MAC3EQ,OAAO,EAAEA,CAAA,KAAMpB,eAAe,CAACY,KAAK,CAAE;MACtCS,QAAQ,EAAEnB,YAAY,CAACH,UAAU,CAAE;MACnCE,SAAS,EAAEA,SAAU;MACrBW,KAAK,EAAEA;IAAM,GAPRA,KAAK;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQX,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACC,EAAA,GAxCIhC,SAAS;AA0Cf,eAAeA,SAAS;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}