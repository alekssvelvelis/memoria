{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/Card.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Card = ({\n  content,\n  isFlipped,\n  onClick\n}) => {\n  const cardStyle = {\n    opacity: isFlipped ? 0.7 : 1\n  };\n  return (\n    /*#__PURE__*/\n    // <div className='group rounded-xl h-48 w-48 [perspective:1000px]'>\n    //     <div className=\"relative h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] group-hover:[transform:rotateY(180deg)]\">\n    //         <div className='absolute inset-0'>\n    //             {/* <div className='h-full w-full rounded-xl object-cover shadow-xl shadow-black/40' >{content}</div> */}\n    //             <img className='w-full h-full rounded-xl object-cover shadow-xl shadow-black/40' src=\"https://i.loli.net/2019/10/18/buDT4YS6zUMfHst.jpg\" />\n    //         </div>\n    //         <div className=\"absolute inset-0 w-full h-full rounded-xl object-cover text-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden]\">\n    //             <img className='w-screen h-full rounded-xl' src=\"https://i.loli.net/2019/11/16/FLnzi5Kq4tkRZSm.jpg\" />\n    //         </div>\n    //     </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      className: \"group rounded-xl h-48 w-48 [perspective:1000px]\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] group-hover:[transform:rotateY(180deg)]\",\n        onClick: onClick,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute inset-0\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-full h-full rounded-xl object-cover shadow-xl shadow-black/40\",\n            style: cardStyle,\n            children: content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 26,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 25,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute inset-0 w-full h-full rounded-xl object-cover text-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden]\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"w-full h-full rounded-xl\",\n            style: cardStyle\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c = Card;\nconst MemoryGame = ({\n  difficulty\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [flippedIndices, setFlippedIndices] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState([]);\n  const generateCards = difficulty => {\n    // Your content for the cards (could be letters, numbers, etc.)\n    const cardContents = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\n\n    // Generate the initial set of cards based on the difficulty\n    let initialCards = [];\n    for (let i = 0; i < difficulty / 2; i++) {\n      const content = cardContents[i % cardContents.length];\n      initialCards.push({\n        id: i * 2,\n        content\n      });\n      initialCards.push({\n        id: i * 2 + 1,\n        content\n      });\n    }\n\n    // Add a joker card if necessary\n    if (difficulty % 3 !== 0) {\n      initialCards.push({\n        id: difficulty * difficulty,\n        content: 'Joker'\n      });\n    }\n\n    // Shuffle the cards\n    initialCards = shuffleArray(initialCards);\n    return initialCards;\n  };\n  const shuffleArray = array => {\n    // Function to shuffle the array (Fisher-Yates algorithm)\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n  const handleCardClick = index => {\n    if (flippedIndices.length < 2 && !flippedIndices.includes(index)) {\n      setFlippedIndices(prevFlipped => [...prevFlipped, index]);\n    }\n  };\n  useEffect(() => {\n    if (flippedIndices.length === 2) {\n      // Check for a match\n      const [index1, index2] = flippedIndices;\n      const card1 = cards[index1];\n      const card2 = cards[index2];\n      if (card1.content === card2.content) {\n        // Match found, add to matched pairs\n        setMatchedPairs(prevMatches => [...prevMatches, card1.content]);\n      }\n\n      // Reset flipped indices\n      setFlippedIndices([]);\n    }\n  }, [flippedIndices, cards]);\n  useEffect(() => {\n    // Check if all pairs are matched\n    if (matchedPairs.length === difficulty / 2) {\n      alert('Game Over! You found all matches including the joker card!');\n      // You can perform any additional actions here, such as starting a new game.\n    }\n  }, [matchedPairs, difficulty]);\n  useEffect(() => {\n    // Generate new cards when the component mounts or when the difficulty changes\n    setCards(generateCards(difficulty));\n  }, [difficulty]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-wrap\",\n    children: cards.map((card, index) => /*#__PURE__*/_jsxDEV(Card, {\n      content: card.content,\n      isFlipped: flippedIndices.includes(index) || matchedPairs.includes(card.content),\n      onClick: () => handleCardClick(index)\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 116,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 114,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryGame, \"FZkGgvzEAM64souxsrZnnRjcGRU=\");\n_c2 = MemoryGame;\nexport default MemoryGame;\nvar _c, _c2;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Card","content","isFlipped","onClick","cardStyle","opacity","className","children","style","fileName","_jsxFileName","lineNumber","columnNumber","_c","MemoryGame","difficulty","_s","cards","setCards","flippedIndices","setFlippedIndices","matchedPairs","setMatchedPairs","generateCards","cardContents","initialCards","i","length","push","id","shuffleArray","array","j","Math","floor","random","handleCardClick","index","includes","prevFlipped","index1","index2","card1","card2","prevMatches","alert","map","card","_c2","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/Card.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst Card = ({ content, isFlipped, onClick }) => {\n  const cardStyle = {\n    opacity: isFlipped ? 0.7 : 1,\n  };\n\n  return (\n    // <div className='group rounded-xl h-48 w-48 [perspective:1000px]'>\n    //     <div className=\"relative h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] group-hover:[transform:rotateY(180deg)]\">\n    //         <div className='absolute inset-0'>\n    //             {/* <div className='h-full w-full rounded-xl object-cover shadow-xl shadow-black/40' >{content}</div> */}\n    //             <img className='w-full h-full rounded-xl object-cover shadow-xl shadow-black/40' src=\"https://i.loli.net/2019/10/18/buDT4YS6zUMfHst.jpg\" />\n    //         </div>\n    //         <div className=\"absolute inset-0 w-full h-full rounded-xl object-cover text-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden]\">\n    //             <img className='w-screen h-full rounded-xl' src=\"https://i.loli.net/2019/11/16/FLnzi5Kq4tkRZSm.jpg\" />\n    //         </div>\n    //     </div>\n    // </div>\n    <div className='group rounded-xl h-48 w-48 [perspective:1000px]'>\n      <div\n        className=\"relative h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] group-hover:[transform:rotateY(180deg)]\"\n        onClick={onClick}\n      >\n        <div className='absolute inset-0'>\n          <div className='w-full h-full rounded-xl object-cover shadow-xl shadow-black/40' style={cardStyle}>\n            {content}\n          </div>\n        </div>\n        <div className=\"absolute inset-0 w-full h-full rounded-xl object-cover text-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden]\">\n          <div className='w-full h-full rounded-xl' style={cardStyle}>\n            {/* Back of the card */}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst MemoryGame = ({ difficulty }) => {\n  const [cards, setCards] = useState([]);\n  const [flippedIndices, setFlippedIndices] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState([]);\n\n  const generateCards = (difficulty) => {\n    // Your content for the cards (could be letters, numbers, etc.)\n    const cardContents = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'];\n\n    // Generate the initial set of cards based on the difficulty\n    let initialCards = [];\n    for (let i = 0; i < difficulty / 2; i++) {\n      const content = cardContents[i % cardContents.length];\n      initialCards.push({ id: i * 2, content });\n      initialCards.push({ id: i * 2 + 1, content });\n    }\n\n    // Add a joker card if necessary\n    if (difficulty % 3 !== 0) {\n      initialCards.push({ id: difficulty * difficulty, content: 'Joker' });\n    }\n\n    // Shuffle the cards\n    initialCards = shuffleArray(initialCards);\n\n    return initialCards;\n  };\n\n  const shuffleArray = (array) => {\n    // Function to shuffle the array (Fisher-Yates algorithm)\n    for (let i = array.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1));\n      [array[i], array[j]] = [array[j], array[i]];\n    }\n    return array;\n  };\n\n  const handleCardClick = (index) => {\n    if (flippedIndices.length < 2 && !flippedIndices.includes(index)) {\n      setFlippedIndices((prevFlipped) => [...prevFlipped, index]);\n    }\n  };\n\n  useEffect(() => {\n    if (flippedIndices.length === 2) {\n      // Check for a match\n      const [index1, index2] = flippedIndices;\n      const card1 = cards[index1];\n      const card2 = cards[index2];\n\n      if (card1.content === card2.content) {\n        // Match found, add to matched pairs\n        setMatchedPairs((prevMatches) => [...prevMatches, card1.content]);\n      }\n\n      // Reset flipped indices\n      setFlippedIndices([]);\n    }\n  }, [flippedIndices, cards]);\n\n  useEffect(() => {\n    // Check if all pairs are matched\n    if (matchedPairs.length === difficulty / 2) {\n      alert('Game Over! You found all matches including the joker card!');\n      // You can perform any additional actions here, such as starting a new game.\n    }\n  }, [matchedPairs, difficulty]);\n\n  useEffect(() => {\n    // Generate new cards when the component mounts or when the difficulty changes\n    setCards(generateCards(difficulty));\n  }, [difficulty]);\n\n  return (\n    <div className='flex flex-wrap'>\n      {cards.map((card, index) => (\n        <Card\n          key={card.id}\n          content={card.content}\n          isFlipped={flippedIndices.includes(index) || matchedPairs.includes(card.content)}\n          onClick={() => handleCardClick(index)}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default MemoryGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}