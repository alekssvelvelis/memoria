{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/GameBoard.jsx\";\nimport React from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  cards,\n  flippedCards,\n  matchedCards,\n  initialReveal,\n  difficulty,\n  handleCardClick,\n  gameEnded\n}) => {\n  function getGridScale(difficulty) {\n    let baseScale = 0.12;\n    switch (difficulty) {\n      case 3:\n        baseScale *= 1.6;\n        break;\n      case 4:\n        baseScale *= 1.6;\n        break;\n      case 5:\n        baseScale *= 1.25;\n        break;\n      case 6:\n        baseScale *= 1.11;\n        break;\n      case 7:\n        baseScale *= 0.9;\n        break;\n      default:\n        break;\n    }\n    return Math.min(window.innerWidth * baseScale, 100);\n  }\n\n  // Generate unique rotation angles for each card\n  const rotationAngles = cards.map(() => Math.random() * 220 - 115);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `flex items-center justify-center grid grid-cols-${difficulty} gap-3 mb-6 mt-2`,\n    children: cards.map((symbol, index) => /*#__PURE__*/_jsxDEV(Card, {\n      content: symbol,\n      isFlipped: initialReveal || flippedCards.includes(index) || matchedCards.some(matched => matched.indexes.includes(index)),\n      isMatched: matchedCards.some(matched => matched.indexes.includes(index)),\n      onClick: () => handleCardClick(index),\n      cardSize: getGridScale(difficulty),\n      gameEnded: gameEnded,\n      rotationAngle: rotationAngles[index] // Pass unique rotation angle for each card\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 9\n  }, this);\n};\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","Card","jsxDEV","_jsxDEV","GameBoard","cards","flippedCards","matchedCards","initialReveal","difficulty","handleCardClick","gameEnded","getGridScale","baseScale","Math","min","window","innerWidth","rotationAngles","map","random","className","children","symbol","index","content","isFlipped","includes","some","matched","indexes","isMatched","onClick","cardSize","rotationAngle","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/GameBoard.jsx"],"sourcesContent":["import React from 'react';\nimport Card from './Card';\n\nconst GameBoard = ({ cards, flippedCards, matchedCards, initialReveal, difficulty, handleCardClick, gameEnded }) => {\n    function getGridScale(difficulty) {\n        let baseScale = 0.12\n        switch(difficulty){\n          case 3:\n            baseScale *= 1.6;\n            break;\n          case 4:\n            baseScale *= 1.6;\n            break;\n          case 5:\n            baseScale *= 1.25;\n            break;\n          case 6:\n            baseScale *= 1.11;\n            break;\n          case 7:\n            baseScale *= 0.9;\n            break;\n          default:\n            break;\n        }\n        return Math.min(window.innerWidth * baseScale, 100);\n    }\n\n    // Generate unique rotation angles for each card\n    const rotationAngles = cards.map(() => Math.random() * 220 - 115);\n\n    return (\n        <div className={`flex items-center justify-center grid grid-cols-${difficulty} gap-3 mb-6 mt-2`}>\n            {cards.map((symbol, index) => (\n                <Card\n                    key={index}\n                    content={symbol}\n                    isFlipped={initialReveal || flippedCards.includes(index) || matchedCards.some((matched) => matched.indexes.includes(index))}\n                    isMatched={matchedCards.some((matched) => matched.indexes.includes(index))}\n                    onClick={() => handleCardClick(index)}\n                    cardSize={getGridScale(difficulty)}\n                    gameEnded={gameEnded}\n                    rotationAngle={rotationAngles[index]} // Pass unique rotation angle for each card\n                />\n            ))}\n        </div>\n    );\n};\n\nexport default GameBoard;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAC;EAAEC,KAAK;EAAEC,YAAY;EAAEC,YAAY;EAAEC,aAAa;EAAEC,UAAU;EAAEC,eAAe;EAAEC;AAAU,CAAC,KAAK;EAChH,SAASC,YAAYA,CAACH,UAAU,EAAE;IAC9B,IAAII,SAAS,GAAG,IAAI;IACpB,QAAOJ,UAAU;MACf,KAAK,CAAC;QACJI,SAAS,IAAI,GAAG;QAChB;MACF,KAAK,CAAC;QACJA,SAAS,IAAI,GAAG;QAChB;MACF,KAAK,CAAC;QACJA,SAAS,IAAI,IAAI;QACjB;MACF,KAAK,CAAC;QACJA,SAAS,IAAI,IAAI;QACjB;MACF,KAAK,CAAC;QACJA,SAAS,IAAI,GAAG;QAChB;MACF;QACE;IACJ;IACA,OAAOC,IAAI,CAACC,GAAG,CAACC,MAAM,CAACC,UAAU,GAAGJ,SAAS,EAAE,GAAG,CAAC;EACvD;;EAEA;EACA,MAAMK,cAAc,GAAGb,KAAK,CAACc,GAAG,CAAC,MAAML,IAAI,CAACM,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC;EAEjE,oBACIjB,OAAA;IAAKkB,SAAS,EAAG,mDAAkDZ,UAAW,kBAAkB;IAAAa,QAAA,EAC3FjB,KAAK,CAACc,GAAG,CAAC,CAACI,MAAM,EAAEC,KAAK,kBACrBrB,OAAA,CAACF,IAAI;MAEDwB,OAAO,EAAEF,MAAO;MAChBG,SAAS,EAAElB,aAAa,IAAIF,YAAY,CAACqB,QAAQ,CAACH,KAAK,CAAC,IAAIjB,YAAY,CAACqB,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,OAAO,CAACH,QAAQ,CAACH,KAAK,CAAC,CAAE;MAC5HO,SAAS,EAAExB,YAAY,CAACqB,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,OAAO,CAACH,QAAQ,CAACH,KAAK,CAAC,CAAE;MAC3EQ,OAAO,EAAEA,CAAA,KAAMtB,eAAe,CAACc,KAAK,CAAE;MACtCS,QAAQ,EAAErB,YAAY,CAACH,UAAU,CAAE;MACnCE,SAAS,EAAEA,SAAU;MACrBuB,aAAa,EAAEhB,cAAc,CAACM,KAAK,CAAE,CAAC;IAAA,GAPjCA,KAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAQb,CACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd,CAAC;AAACC,EAAA,GA5CInC,SAAS;AA8Cf,eAAeA,SAAS;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}