{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\nconst generateCards = difficulty => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap(symbol => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Double the cards to create pairs\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n};\nconst Card = ({\n  content,\n  isFlipped,\n  onClick\n}) => {\n  return (\n    /*#__PURE__*/\n    // <div className='group rounded-xl h-48 w-48 [perspective:1000px]'>\n    //     <div className=\"relative h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] group-hover:[transform:rotateY(180deg)]\">\n    //         <div className='absolute inset-0'>\n    //             {/* <div className='h-full w-full rounded-xl object-cover shadow-xl shadow-black/40' >{content}</div> */}\n    //             <img className='w-full h-full rounded-xl object-cover shadow-xl shadow-black/40' src=\"https://i.loli.net/2019/10/18/buDT4YS6zUMfHst.jpg\" />\n    //         </div>\n    //         <div className=\"absolute inset-0 w-full h-full rounded-xl object-cover text-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden]\">\n    //             <img className='w-screen h-full rounded-xl' src=\"https://i.loli.net/2019/11/16/FLnzi5Kq4tkRZSm.jpg\" />\n    //         </div>\n    //     </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      className: `group rounded-xl h-24 w-24 m-4 [perspective:1000px]`,\n      onClick: onClick,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `relative bg-red-500 h-full w-full items-center justify-center flex  rounded-xl shadow-xl transition-all text-slate-200 duration-500 [transform-style:preserve-3d] ${isFlipped ? 'group-hover:[transform:rotateY(180deg)]' : ''}`,\n        children: [isFlipped && '', /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute bg-red-500 inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] ${isFlipped ? '[transform:rotateY(180deg)] [backface-visibility:hidden]' : ''}`,\n          children: isFlipped && content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c = Card;\nconst MemoryGame = ({\n  difficulty\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState([]);\n\n  // Generate an array of unique content pairs for the cards\n  const generateContentPairs = () => {\n    const totalPairs = difficulty * difficulty / 2;\n    const contentArray = [];\n    for (let i = 0; i < totalPairs; i++) {\n      contentArray.push(`Content ${i + 1}`);\n      contentArray.push(`Content ${i + 1}`);\n    }\n    return contentArray.sort(() => Math.random() - 0.5);\n  };\n\n  // Initialize the game when the component mounts\n  useEffect(() => {\n    const initialCards = Array.from({\n      length: difficulty\n    }, (_, row) => Array.from({\n      length: difficulty\n    }, (_, col) => ({\n      id: `${row}-${col}`,\n      content: '',\n      isFlipped: false\n    })));\n    setCards(initialCards);\n  }, [difficulty]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-wrap\",\n    children: cards.map((symbol, index) => /*#__PURE__*/_jsxDEV(Card, {\n      content: symbol,\n      isFlipped: flippedIndices.includes(index),\n      onClick: () => handleCardClick(index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryGame, \"x7oHR/4WgZhGbKZK9uAbPO3y6LQ=\");\n_c2 = MemoryGame;\nexport default MemoryGame;\nvar _c, _c2;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","generateCards","difficulty","symbols","cardCount","pairsCount","jokerCount","cards","slice","flatMap","symbol","Array","fill","concat","Card","content","isFlipped","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MemoryGame","_s","setCards","flippedIndexes","setFlippedIndexes","matchedPairs","setMatchedPairs","generateContentPairs","totalPairs","contentArray","push","sort","initialCards","from","_","row","col","id","map","index","flippedIndices","includes","handleCardClick","_c2","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst shuffleArray = (array) => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\nconst generateCards = (difficulty) => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap((symbol) => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Double the cards to create pairs\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n};\n\nconst Card = ({ content, isFlipped, onClick }) => {\n  return (\n    // <div className='group rounded-xl h-48 w-48 [perspective:1000px]'>\n    //     <div className=\"relative h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] group-hover:[transform:rotateY(180deg)]\">\n    //         <div className='absolute inset-0'>\n    //             {/* <div className='h-full w-full rounded-xl object-cover shadow-xl shadow-black/40' >{content}</div> */}\n    //             <img className='w-full h-full rounded-xl object-cover shadow-xl shadow-black/40' src=\"https://i.loli.net/2019/10/18/buDT4YS6zUMfHst.jpg\" />\n    //         </div>\n    //         <div className=\"absolute inset-0 w-full h-full rounded-xl object-cover text-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden]\">\n    //             <img className='w-screen h-full rounded-xl' src=\"https://i.loli.net/2019/11/16/FLnzi5Kq4tkRZSm.jpg\" />\n    //         </div>\n    //     </div>\n    // </div>\n    <div\n      className={`group rounded-xl h-24 w-24 m-4 [perspective:1000px]`}\n      onClick={onClick}\n    >\n      <div className={`relative bg-red-500 h-full w-full items-center justify-center flex  rounded-xl shadow-xl transition-all text-slate-200 duration-500 [transform-style:preserve-3d] ${isFlipped ? 'group-hover:[transform:rotateY(180deg)]' : ''}`}>\n            {isFlipped && '' }\n        <div className={`absolute bg-red-500 inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] ${isFlipped ? '[transform:rotateY(180deg)] [backface-visibility:hidden]' : ''}`}>\n          {isFlipped && content}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst MemoryGame = ({ difficulty }) => {\n  const [cards, setCards] = useState([]);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState([]);\n\n  // Generate an array of unique content pairs for the cards\n  const generateContentPairs = () => {\n    const totalPairs = (difficulty * difficulty) / 2;\n    const contentArray = [];\n\n    for (let i = 0; i < totalPairs; i++) {\n      contentArray.push(`Content ${i + 1}`);\n      contentArray.push(`Content ${i + 1}`);\n    }\n\n    return contentArray.sort(() => Math.random() - 0.5);\n  };\n\n  // Initialize the game when the component mounts\n  useEffect(() => {\n    const initialCards = Array.from({ length: difficulty }, (_, row) =>\n      Array.from({ length: difficulty }, (_, col) => ({\n        id: `${row}-${col}`,\n        content: '',\n        isFlipped: false,\n      }))\n    );\n\n    setCards(initialCards);\n  }, [difficulty]);\n  \n\n  return (\n    <div className='flex flex-wrap'>\n      {cards.map((symbol, index) => (\n        <Card\n          key={index}\n          content={symbol}\n          isFlipped={flippedIndices.includes(index)}\n          onClick={() => handleCardClick(index)}\n        />\n      ))}\n    </div>\n  );\n};\n\nexport default MemoryGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}