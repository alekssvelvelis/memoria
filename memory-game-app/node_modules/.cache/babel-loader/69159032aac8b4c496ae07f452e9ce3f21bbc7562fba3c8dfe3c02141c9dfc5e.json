{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport GameBoard from './GameBoard';\nimport GameInfo from './GameInfo';\nimport ResultScreen from './ResultScreen';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst isLoggedInObject = localStorage.getItem('token');\nconst isLoggedIn = isLoggedInObject ? JSON.parse(isLoggedInObject).value : null;\nconst shuffleArray = array => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\nconst generateCards = (difficulty, theme) => {\n  const symbols = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '1', '12', '13', '14', '15', '16'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3;\n  const jokerCount = cardCount % 3;\n  let cards = symbols.slice(0, pairsCount).flatMap(symbol => Array(3).fill(symbol));\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n  cards = shuffleArray(cards);\n  const imageFolderPath = `images/${theme}/`;\n  return cards.map(card => card === 'Joker' ? `/${imageFolderPath}joker.jpeg` : `/${imageFolderPath}${card}.jpeg`);\n};\nconst MemoryGame = ({\n  difficulty,\n  theme\n}) => {\n  _s();\n  function calculateTimeForDifficulty(difficulty) {\n    let timeInSeconds;\n    switch (difficulty) {\n      case 3:\n        timeInSeconds = 30;\n        break;\n      case 4:\n        timeInSeconds = 60;\n        break;\n      case 5:\n        timeInSeconds = 180;\n        break;\n      case 6:\n        timeInSeconds = 240;\n        break;\n      case 7:\n        timeInSeconds = 300;\n        break;\n      default:\n        timeInSeconds = 240;\n        break;\n    }\n    return timeInSeconds;\n  }\n  const [totalPairs, setTotalPairs] = useState(difficulty * difficulty / 3);\n  const [diffToPlay, setDiffToPlay] = useState(difficulty);\n  const [cards, setCards] = useState(generateCards(diffToPlay, theme));\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [initialReveal, setInitialReveal] = useState(true);\n  const [timeLeft, updateTimeLeft] = useState(calculateTimeForDifficulty(diffToPlay));\n  const [currentTurnCount, setTurnCount] = useState(0);\n  const [gameEnded, setGameEnded] = useState(false);\n  const [gameOutcome, setGameOutcome] = useState(0);\n  const [achievements, setAchievements] = useState('');\n  useEffect(() => {\n    // for starting the game originally\n    setCards(generateCards(diffToPlay, theme));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, diffToPlay > 4 ? 6000 : 3000);\n    return () => clearTimeout(revealTimeout);\n  }, [diffToPlay, theme]);\n  useEffect(() => {\n    //for ending the game\n    if (!initialReveal && timeLeft > 0 && !gameEnded) {\n      if (matchedCards.length === totalPairs) {\n        console.log('You win!');\n        setGameEnded(true);\n        setGameOutcome(1);\n        handleSaveGame(1);\n      } else {\n        const remainingUnmatchedCards = cards.filter((symbol, index) => !flippedCards.includes(index) && !matchedCards.some(matched => matched.indexes.includes(index)));\n        if (remainingUnmatchedCards.length === 1 && remainingUnmatchedCards[0] === `/images/${theme}/joker.jpeg`) {\n          console.log('You win! Only the Joker is left.');\n          setGameEnded(true);\n          setGameOutcome(1);\n          handleSaveGame(1);\n        }\n      }\n    } else if (!initialReveal && (timeLeft === 0 || timeLeft < 0)) {\n      console.log('You lose!');\n      setGameEnded(true);\n      setGameOutcome(0);\n      handleSaveGame(0);\n    }\n  }, [initialReveal, timeLeft, matchedCards, totalPairs, cards, flippedCards]);\n  useEffect(() => {\n    //for checking matches and playing the game\n    if (!initialReveal && timeLeft > 0 && gameEnded !== true) {\n      const timerInterval = setInterval(() => {\n        if (gameEnded !== true) {\n          updateTimeLeft(prevTime => prevTime - 1);\n        }\n      }, 1000);\n      return () => clearInterval(timerInterval);\n    }\n  }, [initialReveal, timeLeft, gameEnded, matchedCards, totalPairs]);\n  const handleCardClick = index => {\n    if (initialReveal || gameEnded) {\n      return;\n    }\n    // Check if the clicked card is already flipped\n    if (flippedCards.includes(index) || flippedCards.length === 3 || matchedCards.some(matched => matched.indexes.includes(index))) {\n      return;\n    }\n    // Flip the clicked card\n    setFlippedCards([...flippedCards, index]);\n    if (flippedCards.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedCards[0]];\n      const card2 = cards[flippedCards[1]];\n      const card3 = cards[index];\n      if (card1 === card2 && card2 === card3) {\n        const matchedContent = [card1, card2, card3];\n        const matchedIndexes = [...flippedCards, index];\n        setMatchedCards(prevMatchedCards => [...prevMatchedCards, {\n          content: matchedContent,\n          indexes: matchedIndexes\n        }]);\n      }\n      setTurnCount(prevTurnCount => prevTurnCount + 1);\n      setTimeout(() => {\n        setFlippedCards([]);\n      }, 500);\n    }\n  };\n  const resetGame = (newDifficulty, newTheme) => {\n    setGameEnded(false);\n    setTurnCount(0);\n    updateTimeLeft(calculateTimeForDifficulty(newDifficulty));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n    setTotalPairs(newDifficulty * newDifficulty / 3);\n    setCards(generateCards(newDifficulty, newTheme));\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, newDifficulty > 4 ? 6000 : 3000);\n    return () => clearTimeout(revealTimeout);\n  };\n  const handlePlayAgain = () => {\n    resetGame(diffToPlay, theme);\n  };\n  const handleNextLevel = () => {\n    const nextDifficulty = diffToPlay + 1;\n    setDiffToPlay(nextDifficulty);\n    resetGame(nextDifficulty, theme);\n  };\n  const formattedTime = `${Math.floor(timeLeft / 60)}:${(timeLeft % 60).toLocaleString('en-US', {\n    minimumIntegerDigits: 2\n  })}`;\n  const handleSaveGame = async outcome => {\n    const formData = {\n      turn_count: currentTurnCount,\n      pair_count: matchedCards.length,\n      time: timeLeft,\n      difficulty: diffToPlay,\n      theme: theme,\n      gameOutcome: outcome\n    };\n    try {\n      const response = await fetch('http://localhost/api/save-played-game', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${isLoggedIn}`\n        },\n        body: JSON.stringify(formData)\n      });\n      const responseData = await response.json();\n      if (!response.ok) {\n        console.error('Error:', responseData);\n      } else {\n        console.log('game saved successfully');\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n    try {\n      const response = await fetch('http://localhost/api/checkAndAwardAchievement', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${isLoggedIn}`\n        },\n        body: JSON.stringify(formData)\n      });\n      const responseData = await response.json();\n      if (!response.ok) {\n        console.error('Error:', responseData);\n      } else {\n        console.log(responseData);\n        if (responseData.message === 'User already has all available achievements or no achievements were awarded') {\n          setAchievements('');\n        } else {\n          setAchievements(responseData.message);\n        }\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n    try {\n      const moneyEarned = 100 + timeLeft * 2 + matchedCards.length * 10;\n      const response = await fetch('http://localhost/api/updateUserMoney', {\n        method: 'POST',\n        headers: {\n          \"Content-Type\": \"application/json\",\n          'Authorization': `Bearer ${isLoggedIn}`\n        },\n        body: JSON.stringify({\n          moneyEarned\n        })\n      });\n      const responseData = await response.json();\n      if (!response.ok) {\n        console.error('Error:', responseData);\n      } else {\n        console.log(responseData.message);\n      }\n    } catch (error) {\n      console.error('Error:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"overflow-y-scroll min-h-screen bg-[rgb(18,18,18,0.9)] flex justify-center w-full text-white flex-col\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full h-[10vh]\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"w-full h-full flex flex-col justify-center items-center\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex flex-col w-full  h-full items-center justify-center overflow-x-hidden\",\n          children: [/*#__PURE__*/_jsxDEV(GameInfo, {\n            currentTime: formattedTime,\n            currentTurnCount: currentTurnCount,\n            selectedTheme: theme\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 11\n          }, this), gameEnded === true && /*#__PURE__*/_jsxDEV(ResultScreen, {\n            time: formattedTime,\n            turns: currentTurnCount,\n            gamestate: gameOutcome,\n            pairs: matchedCards.length,\n            onPlayAgain: handlePlayAgain,\n            onNextLevel: handleNextLevel,\n            difficulty: diffToPlay,\n            achievements: achievements,\n            moneyEarned: 100 + timeLeft * 2 + matchedCards.length * 10\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 262,\n            columnNumber: 34\n          }, this), /*#__PURE__*/_jsxDEV(GameBoard, {\n            cards: cards,\n            flippedCards: flippedCards,\n            matchedCards: matchedCards,\n            initialReveal: initialReveal,\n            difficulty: diffToPlay,\n            handleCardClick: handleCardClick\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 9\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n};\n_s(MemoryGame, \"qOVv8kZxzkSarTvfE2CLDskrpcg=\");\n_c = MemoryGame;\nexport default MemoryGame;\nvar _c;\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","GameBoard","GameInfo","ResultScreen","jsxDEV","_jsxDEV","Fragment","_Fragment","isLoggedInObject","localStorage","getItem","isLoggedIn","JSON","parse","value","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","generateCards","difficulty","theme","symbols","cardCount","pairsCount","jokerCount","cards","slice","flatMap","symbol","Array","fill","concat","imageFolderPath","map","card","MemoryGame","_s","calculateTimeForDifficulty","timeInSeconds","totalPairs","setTotalPairs","diffToPlay","setDiffToPlay","setCards","flippedCards","setFlippedCards","matchedCards","setMatchedCards","initialReveal","setInitialReveal","timeLeft","updateTimeLeft","currentTurnCount","setTurnCount","gameEnded","setGameEnded","gameOutcome","setGameOutcome","achievements","setAchievements","revealTimeout","setTimeout","clearTimeout","console","log","handleSaveGame","remainingUnmatchedCards","filter","index","includes","some","matched","indexes","timerInterval","setInterval","prevTime","clearInterval","handleCardClick","card1","card2","card3","matchedContent","matchedIndexes","prevMatchedCards","content","prevTurnCount","resetGame","newDifficulty","newTheme","handlePlayAgain","handleNextLevel","nextDifficulty","formattedTime","toLocaleString","minimumIntegerDigits","outcome","formData","turn_count","pair_count","time","response","fetch","method","headers","body","stringify","responseData","json","ok","error","message","moneyEarned","children","className","fileName","_jsxFileName","lineNumber","columnNumber","currentTime","selectedTheme","turns","gamestate","pairs","onPlayAgain","onNextLevel","_c","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GameBoard from './GameBoard';\nimport GameInfo from './GameInfo';\nimport ResultScreen from './ResultScreen';\nconst isLoggedInObject = localStorage.getItem('token');\nconst isLoggedIn = isLoggedInObject ? JSON.parse(isLoggedInObject).value : null;\nconst shuffleArray = (array) => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\nconst generateCards = (difficulty, theme) => {\n  const symbols = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '1', '12', '13', '14', '15', '16'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3;\n  const jokerCount = cardCount % 3;\n\n  let cards = symbols.slice(0, pairsCount).flatMap((symbol) => Array(3).fill(symbol));\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n  cards = shuffleArray(cards);\n\n  const imageFolderPath = `images/${theme}/`;\n  return cards.map((card) => (card === 'Joker' ? `/${imageFolderPath}joker.jpeg` : `/${imageFolderPath}${card}.jpeg`));\n};\n\nconst MemoryGame = ({ difficulty, theme }) => {\n  function calculateTimeForDifficulty(difficulty) {\n    let timeInSeconds;\n    \n    switch (difficulty) {\n        case 3:\n            timeInSeconds = 30;\n            break;\n        case 4:\n            timeInSeconds = 60;\n            break;\n        case 5:\n            timeInSeconds = 180;\n            break;\n        case 6:\n            timeInSeconds = 240;\n            break;\n        case 7:\n            timeInSeconds = 300;\n            break;\n        default:\n            timeInSeconds = 240;\n            break;\n    }\n    \n    return timeInSeconds;\n}\n  const [totalPairs, setTotalPairs] = useState(difficulty * difficulty / 3);\n  const [diffToPlay, setDiffToPlay] =  useState(difficulty)\n  const [cards, setCards] = useState(generateCards(diffToPlay, theme));\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [initialReveal, setInitialReveal] = useState(true);\n  const [timeLeft, updateTimeLeft] = useState(calculateTimeForDifficulty(diffToPlay));\n  const [currentTurnCount, setTurnCount] = useState(0);\n  const [gameEnded, setGameEnded] = useState(false);\n  const [gameOutcome, setGameOutcome] = useState(0);\n  const [achievements, setAchievements] = useState('');\n\n  useEffect(() => { // for starting the game originally\n    setCards(generateCards(diffToPlay, theme));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, diffToPlay > 4 ? 6000 : 3000);\n\n    return () => clearTimeout(revealTimeout);\n  }, [diffToPlay, theme]);\n\n  useEffect(() => { //for ending the game\n    if (!initialReveal && timeLeft > 0 && !gameEnded) {\n      if (matchedCards.length === totalPairs) {\n        console.log('You win!');\n        setGameEnded(true);\n        setGameOutcome(1);\n        handleSaveGame(1);\n      } else {\n        const remainingUnmatchedCards = cards.filter(\n          (symbol, index) =>\n            !flippedCards.includes(index) &&\n            !matchedCards.some((matched) => matched.indexes.includes(index))\n        );\n        if (remainingUnmatchedCards.length === 1 && remainingUnmatchedCards[0] === `/images/${theme}/joker.jpeg`) {\n          console.log('You win! Only the Joker is left.');\n          setGameEnded(true);\n          setGameOutcome(1);\n          handleSaveGame(1);\n        }\n      }\n    } else if (!initialReveal && (timeLeft === 0 || timeLeft < 0)) {\n      console.log('You lose!');\n      setGameEnded(true);\n      setGameOutcome(0);\n      handleSaveGame(0);\n    }\n  }, [initialReveal, timeLeft, matchedCards, totalPairs, cards, flippedCards]);\n\n\n  useEffect(() => { //for checking matches and playing the game\n    if (!initialReveal && timeLeft > 0 && gameEnded !== true) {\n        const timerInterval = setInterval(() => {\n          if (gameEnded !== true) {\n            updateTimeLeft((prevTime) => prevTime - 1);\n          }\n        }, 1000);\n        return () => clearInterval(timerInterval);\n    }\n  }, [initialReveal, timeLeft, gameEnded, matchedCards, totalPairs]);\n  const handleCardClick = (index) => {\n    if (initialReveal || gameEnded) {\n      return;\n    }\n    // Check if the clicked card is already flipped\n    if (flippedCards.includes(index) || flippedCards.length === 3 || matchedCards.some((matched) => matched.indexes.includes(index))) {\n      return;\n    }\n    // Flip the clicked card\n    setFlippedCards([...flippedCards, index]);\n\n    if (flippedCards.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedCards[0]];\n      const card2 = cards[flippedCards[1]];\n      const card3 = cards[index];\n\n      if (card1 === card2 && card2 === card3) {\n        const matchedContent = [card1, card2, card3];\n        const matchedIndexes = [...flippedCards, index];\n        setMatchedCards((prevMatchedCards) => [...prevMatchedCards, { content: matchedContent, indexes: matchedIndexes }]);\n      }\n      setTurnCount((prevTurnCount) => prevTurnCount + 1);\n\n      setTimeout(() => {\n        setFlippedCards([]);\n      }, 500);\n\n    }\n  };\n\n  const resetGame = (newDifficulty, newTheme) => {\n    setGameEnded(false);\n    setTurnCount(0);\n    updateTimeLeft(calculateTimeForDifficulty(newDifficulty));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n    setTotalPairs(newDifficulty * newDifficulty / 3);\n    setCards(generateCards(newDifficulty, newTheme));\n  \n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, newDifficulty > 4 ? 6000 : 3000);\n  \n    return () => clearTimeout(revealTimeout);\n  };\n  \n  const handlePlayAgain = () => {\n    resetGame(diffToPlay, theme);\n  };\n  \n  const handleNextLevel = () => {\n    const nextDifficulty = diffToPlay + 1;\n    setDiffToPlay(nextDifficulty);\n    resetGame(nextDifficulty, theme);\n  };\n  \n  const formattedTime = `${Math.floor(timeLeft / 60)}:${(timeLeft % 60).toLocaleString('en-US', { minimumIntegerDigits: 2 })}`;\n\n  const handleSaveGame = async (outcome) => {\n\n    const formData = {\n      turn_count: currentTurnCount,\n      pair_count: matchedCards.length,\n      time: timeLeft,\n      difficulty: diffToPlay,\n      theme: theme,\n      gameOutcome: outcome,\n    };\n    \n    try{\n      const response = await fetch('http://localhost/api/save-played-game', {\n          method: 'POST',\n          headers: {\n              \"Content-Type\": \"application/json\",\n              'Authorization': `Bearer ${isLoggedIn}`\n          },\n          body: JSON.stringify(formData),\n      });\n      const responseData = await response.json();\n      if (!response.ok) {\n          console.error('Error:', responseData);\n      } else {\n          console.log('game saved successfully');\n      }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n\n    try{\n      const response = await fetch('http://localhost/api/checkAndAwardAchievement', {\n          method: 'POST',\n          headers: {\n              \"Content-Type\": \"application/json\",\n              'Authorization': `Bearer ${isLoggedIn}`\n          },\n          body: JSON.stringify(formData),\n      });\n      const responseData = await response.json();\n      if (!response.ok) {\n          console.error('Error:', responseData);\n      } else {\n          console.log(responseData);\n          if(responseData.message === 'User already has all available achievements or no achievements were awarded'){\n            setAchievements('');\n          }else{\n            setAchievements(responseData.message);\n          }\n      }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n    try{\n      const moneyEarned = 100+timeLeft*2+matchedCards.length*10\n      const response = await fetch('http://localhost/api/updateUserMoney', {\n          method: 'POST',\n          headers: {\n              \"Content-Type\": \"application/json\",\n              'Authorization': `Bearer ${isLoggedIn}`\n          },\n          body: JSON.stringify({moneyEarned}),\n      });\n      const responseData = await response.json();\n      if (!response.ok) {\n          console.error('Error:', responseData);\n      }else{\n        console.log(responseData.message);\n      }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n  }\n\n  return (\n    <>\n    <div className=\"overflow-y-scroll min-h-screen bg-[rgb(18,18,18,0.9)] flex justify-center w-full text-white flex-col\">\n      <div className='w-full h-[10vh]'></div>\n      <div className='w-full h-full flex flex-col justify-center items-center'>\n        <div className='flex flex-col w-full  h-full items-center justify-center overflow-x-hidden'>\n          <GameInfo currentTime={formattedTime} currentTurnCount={currentTurnCount} selectedTheme={theme}/>\n          {gameEnded === true && <ResultScreen time={formattedTime} turns={currentTurnCount} gamestate={gameOutcome} pairs={matchedCards.length} onPlayAgain={handlePlayAgain}\n                        onNextLevel={handleNextLevel} difficulty={diffToPlay} achievements={achievements} moneyEarned={100+timeLeft*2+matchedCards.length*10}/>}\n          <GameBoard cards={cards} flippedCards={flippedCards} matchedCards={matchedCards} initialReveal={initialReveal} difficulty={diffToPlay} handleCardClick={handleCardClick}/>\n        </div>\n      </div>\n    </div>\n    </>\n  );\n};\n\nexport default MemoryGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}