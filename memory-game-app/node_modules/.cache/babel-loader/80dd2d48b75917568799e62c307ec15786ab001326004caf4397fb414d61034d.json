{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\nconst generateContentPairs = difficulty => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap(symbol => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Double the cards to create pairs\n  cards = cards.concat(cards);\n\n  // Add letters for the back of each card\n  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.slice(0, cardCount);\n  cards = cards.map((symbol, index) => ({\n    symbol,\n    letter: letters[index]\n  }));\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n};\nconst Card = ({\n  content,\n  isFlipped,\n  onClick\n}) => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `group rounded-xl h-24 w-24 m-4 [perspective:1000px]`,\n    onClick: onClick,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `relative bg-red-500 h-full w-full items-center justify-center flex  rounded-xl shadow-xl transition-all text-slate-200 duration-500 [transform-style:preserve-3d] ${isFlipped ? 'group-hover:[transform:rotateY(180deg)]' : ''}`,\n      children: [isFlipped && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"absolute inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] [transform:rotateY(180deg)] [backface-visibility:hidden]\",\n        children: content.letter\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 23\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `absolute bg-red-500 inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] ${isFlipped ? '[transform:rotateY(180deg)] [backface-visibility:hidden]' : ''}`,\n        children: isFlipped && content.symbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_c = Card;\nconst MemoryGame = ({\n  difficulty\n}) => {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState([]);\n  const handleCardClick = id => {\n    if (flippedIndexes.length < 3 && !flippedIndexes.includes(id)) {\n      setCards(prevCards => prevCards.map(row => row.map(card => card.id === id ? {\n        ...card,\n        isFlipped: !card.isFlipped\n      } : card)));\n      setFlippedIndexes(prevIndexes => [...prevIndexes, id]);\n    }\n  };\n  useEffect(() => {\n    const gridSize = difficulty; // Set the grid size (minimum 3, maximum 6)\n\n    const contentPairs = generateContentPairs(difficulty);\n    const shuffledContent = shuffleArray(contentPairs);\n    const initialCards = Array.from({\n      length: gridSize\n    }, (_, row) => Array.from({\n      length: gridSize\n    }, (_, col) => ({\n      id: `${row}-${col}`,\n      content: shuffledContent[row * gridSize + col],\n      isFlipped: false\n    })));\n    setCards(initialCards);\n  }, [difficulty]);\n  useEffect(() => {\n    if (flippedIndexes.length === 3) {\n      const selectedCards = flippedIndexes.map(index => {\n        const [row, col] = index.split('-');\n        return cards[row][col];\n      });\n      if (selectedCards.every((card, _, array) => card.content.symbol === array[0].content.symbol)) {\n        setMatchedPairs(prevPairs => [...prevPairs, selectedCards[0].content.symbol]);\n      }\n      setTimeout(() => {\n        setFlippedIndexes([]);\n        setCards(prevCards => prevCards.map(row => row.map(card => flippedIndexes.includes(card.id) ? {\n          ...card,\n          isFlipped: false\n        } : card)));\n      }, 1000);\n    }\n  }, [flippedIndexes, cards]);\n  useEffect(() => {\n    if (matchedPairs.length === difficulty * difficulty / 3) {\n      alert('Congratulations! You have won!');\n    }\n  }, [matchedPairs, difficulty]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-wrap justify-center\",\n    children: cards.map((row, rowIndex) => row.map((card, colIndex) => /*#__PURE__*/_jsxDEV(Card, {\n      content: card.isFlipped ? card.content : '',\n      isFlipped: card.isFlipped,\n      onClick: () => handleCardClick(card.id)\n    }, card.id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 11\n    }, this)))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryGame, \"ay07tD+NrC5N8SkyTC2PH0ai9BY=\");\n_c2 = MemoryGame;\nexport default MemoryGame;\nvar _c, _c2;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","generateContentPairs","difficulty","symbols","cardCount","pairsCount","jokerCount","cards","slice","flatMap","symbol","Array","fill","concat","letters","map","index","letter","Card","content","isFlipped","onClick","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MemoryGame","_s","setCards","flippedIndexes","setFlippedIndexes","matchedPairs","setMatchedPairs","handleCardClick","id","includes","prevCards","row","card","prevIndexes","gridSize","contentPairs","shuffledContent","initialCards","from","_","col","selectedCards","split","every","prevPairs","setTimeout","alert","rowIndex","colIndex","_c2","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst shuffleArray = (array) => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\nconst generateContentPairs = (difficulty) => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap((symbol) => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Double the cards to create pairs\n  cards = cards.concat(cards);\n\n  // Add letters for the back of each card\n  const letters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'.slice(0, cardCount);\n  cards = cards.map((symbol, index) => ({ symbol, letter: letters[index] }));\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n};\n\nconst Card = ({ content, isFlipped, onClick }) => {\n  return (\n    <div\n      className={`group rounded-xl h-24 w-24 m-4 [perspective:1000px]`}\n      onClick={onClick}\n    >\n      <div className={`relative bg-red-500 h-full w-full items-center justify-center flex  rounded-xl shadow-xl transition-all text-slate-200 duration-500 [transform-style:preserve-3d] ${isFlipped ? 'group-hover:[transform:rotateY(180deg)]' : ''}`}>\n        {isFlipped && <div className=\"absolute inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] [transform:rotateY(180deg)] [backface-visibility:hidden]\">{content.letter}</div>}\n        <div className={`absolute bg-red-500 inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] ${isFlipped ? '[transform:rotateY(180deg)] [backface-visibility:hidden]' : ''}`}>\n          {isFlipped && content.symbol}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst MemoryGame = ({ difficulty }) => {\n  const [cards, setCards] = useState([]);\n  const [flippedIndexes, setFlippedIndexes] = useState([]);\n  const [matchedPairs, setMatchedPairs] = useState([]);\n\n  const handleCardClick = (id) => {\n    if (flippedIndexes.length < 3 && !flippedIndexes.includes(id)) {\n      setCards((prevCards) =>\n        prevCards.map((row) =>\n          row.map((card) =>\n            card.id === id\n              ? { ...card, isFlipped: !card.isFlipped }\n              : card\n          )\n        )\n      );\n      setFlippedIndexes((prevIndexes) => [...prevIndexes, id]);\n    }\n  };\n\n  useEffect(() => {\n    const gridSize = difficulty; // Set the grid size (minimum 3, maximum 6)\n\n    const contentPairs = generateContentPairs(difficulty);\n    const shuffledContent = shuffleArray(contentPairs);\n\n    const initialCards = Array.from({ length: gridSize }, (_, row) =>\n      Array.from({ length: gridSize }, (_, col) => ({\n        id: `${row}-${col}`,\n        content: shuffledContent[row * gridSize + col],\n        isFlipped: false,\n      }))\n    );\n\n    setCards(initialCards);\n  }, [difficulty]);\n\n  useEffect(() => {\n    if (flippedIndexes.length === 3) {\n      const selectedCards = flippedIndexes.map((index) => {\n        const [row, col] = index.split('-');\n        return cards[row][col];\n      });\n\n      if (\n        selectedCards.every(\n          (card, _, array) => card.content.symbol === array[0].content.symbol\n        )\n      ) {\n        setMatchedPairs((prevPairs) => [...prevPairs, selectedCards[0].content.symbol]);\n      }\n\n      setTimeout(() => {\n        setFlippedIndexes([]);\n        setCards((prevCards) =>\n          prevCards.map((row) =>\n            row.map((card) =>\n              flippedIndexes.includes(card.id)\n                ? { ...card, isFlipped: false }\n                : card\n            )\n          )\n        );\n      }, 1000);\n    }\n  }, [flippedIndexes, cards]);\n\n  useEffect(() => {\n    if (matchedPairs.length === difficulty * difficulty / 3) {\n      alert('Congratulations! You have won!');\n    }\n  }, [matchedPairs, difficulty]);\n\n  return (\n    <div className=\"flex flex-wrap justify-center\">\n      {cards.map((row, rowIndex) =>\n        row.map((card, colIndex) => (\n          <Card\n            key={card.id}\n            content={card.isFlipped ? card.content : ''}\n            isFlipped={card.isFlipped}\n            onClick={() => handleCardClick(card.id)}\n          />\n        ))\n      )}\n    </div>\n  );\n};\n\nexport default MemoryGame;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}