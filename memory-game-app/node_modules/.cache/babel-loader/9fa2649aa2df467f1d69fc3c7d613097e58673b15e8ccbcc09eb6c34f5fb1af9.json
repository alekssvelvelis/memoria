{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\nconst generateCards = difficulty => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap(symbol => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n};\nconst Card = ({\n  content,\n  isFlipped,\n  isMatched,\n  onClick\n}) => {\n  return (\n    /*#__PURE__*/\n    // <div className='group rounded-xl h-48 w-48 [perspective:1000px]'>\n    //     <div className=\"relative h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] group-hover:[transform:rotateY(180deg)]\">\n    //         <div className='absolute inset-0'>\n    //             {/* <div className='h-full w-full rounded-xl object-cover shadow-xl shadow-black/40' >{content}</div> */}\n    //             <img className='w-full h-full rounded-xl object-cover shadow-xl shadow-black/40' src=\"https://i.loli.net/2019/10/18/buDT4YS6zUMfHst.jpg\" />\n    //         </div>\n    //         <div className=\"absolute inset-0 w-full h-full rounded-xl object-cover text-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden]\">\n    //             <img className='w-screen h-full rounded-xl' src=\"https://i.loli.net/2019/11/16/FLnzi5Kq4tkRZSm.jpg\" />\n    //         </div>\n    //     </div>\n    // </div>\n    _jsxDEV(\"div\", {\n      className: `group rounded-xl h-24 w-24 m-4 [perspective:1000px]`,\n      onClick: () => !isMatched && onClick() // Make unclickable if matched\n      ,\n      style: {\n        opacity: isMatched ? 0.5 : 1 // Decrease opacity if matched\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `relative bg-red-500 h-full w-full items-center justify-center flex rounded-xl shadow-xl transition-all text-slate-200 duration-500 [transform-style:preserve-3d] ${isFlipped && !isMatched ? '[transform:rotateY(180deg)]' : isMatched ? 'bg-green-500' : ''}`,\n        children: isFlipped ? '' : /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute bg-red-500 inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] [backface-visibility:hidden]`,\n          children: isFlipped ? '' : content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }, this)\n  );\n};\n_c = Card;\nconst MemoryGame = ({\n  difficulty\n}) => {\n  _s();\n  const [cards, setCards] = useState(generateCards(difficulty));\n  const [flippedCards, setflippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  console.log(flippedCards);\n  console.log(matchedCards);\n  useEffect(() => {\n    // Shuffle the cards when the component mounts or when the game restarts\n    setCards(generateCards(difficulty));\n    setflippedCards([]);\n    setMatchedCards([]);\n  }, [difficulty]);\n  const handleCardClick = index => {\n    // Check if the clicked card is already flipped\n    if (flippedCards.includes(index) || flippedCards.length === 3 || matchedCards.some(matched => matched.indexes.includes(index))) {\n      return;\n    }\n\n    // Flip the clicked card\n    setflippedCards([...flippedCards, index]);\n    if (flippedCards.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedCards[0]];\n      const card2 = cards[flippedCards[1]];\n      const card3 = cards[index];\n      if (card1 === card2 && card2 === card3) {\n        const matchedContent = [card1, card2, card3];\n        const matchedIndexes = [...flippedCards, index];\n        setMatchedCards(prevMatchedCards => [...prevMatchedCards, {\n          content: matchedContent,\n          indexes: matchedIndexes\n        }]);\n        console.log('cards matched');\n        setflippedCards([]);\n      } else {\n        console.log('cards mismatched');\n      }\n      setTimeout(() => {\n        if (card1 == card2 && card2 === card3) {\n          setflippedCards([]);\n        } else {\n          setflippedCards([]);\n        }\n      }, 1000);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flex flex-wrap\",\n    children: cards.map((symbol, index) => /*#__PURE__*/_jsxDEV(Card, {\n      content: symbol,\n      isFlipped: flippedCards.includes(index),\n      isMatched: matchedCards.some(matched => matched.indexes.includes(index)),\n      onClick: () => handleCardClick(index)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 119,\n    columnNumber: 3\n  }, this);\n};\n_s(MemoryGame, \"NUd5Zv2Shvmla30aOpOLYyjIvwU=\");\n_c2 = MemoryGame;\nexport default MemoryGame;\nvar _c, _c2;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","generateCards","difficulty","symbols","cardCount","pairsCount","jokerCount","cards","slice","flatMap","symbol","Array","fill","concat","Card","content","isFlipped","isMatched","onClick","className","style","opacity","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","MemoryGame","_s","setCards","flippedCards","setflippedCards","matchedCards","setMatchedCards","console","log","handleCardClick","index","includes","some","matched","indexes","card1","card2","card3","matchedContent","matchedIndexes","prevMatchedCards","setTimeout","map","_c2","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst shuffleArray = (array) => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\nconst generateCards = (difficulty) => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap((symbol) => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n};\n\nconst Card = ({ content, isFlipped, isMatched, onClick }) => {\n  return (\n    // <div className='group rounded-xl h-48 w-48 [perspective:1000px]'>\n    //     <div className=\"relative h-full w-full rounded-xl shadow-xl transition-all duration-500 [transform-style:preserve-3d] group-hover:[transform:rotateY(180deg)]\">\n    //         <div className='absolute inset-0'>\n    //             {/* <div className='h-full w-full rounded-xl object-cover shadow-xl shadow-black/40' >{content}</div> */}\n    //             <img className='w-full h-full rounded-xl object-cover shadow-xl shadow-black/40' src=\"https://i.loli.net/2019/10/18/buDT4YS6zUMfHst.jpg\" />\n    //         </div>\n    //         <div className=\"absolute inset-0 w-full h-full rounded-xl object-cover text-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden]\">\n    //             <img className='w-screen h-full rounded-xl' src=\"https://i.loli.net/2019/11/16/FLnzi5Kq4tkRZSm.jpg\" />\n    //         </div>\n    //     </div>\n    // </div>\n\n    <div\n      className={`group rounded-xl h-24 w-24 m-4 [perspective:1000px]`}\n      onClick={() => !isMatched && onClick()} // Make unclickable if matched\n      style={{\n        opacity: isMatched ? 0.5 : 1, // Decrease opacity if matched\n      }}\n    >\n      <div className={`relative bg-red-500 h-full w-full items-center justify-center flex rounded-xl shadow-xl transition-all text-slate-200 duration-500 [transform-style:preserve-3d] ${isFlipped && !isMatched ? '[transform:rotateY(180deg)]' : (isMatched ? 'bg-green-500' : '')}`}>\n        {isFlipped ? '' : (\n          <div className={`absolute bg-red-500 inset-0 w-full h-full rounded-xl items-center justify-center flex object-cover text-center text-slate-200 [transform-style:preserve-3d] [backface-visibility:hidden]`}>\n            {isFlipped ? '' : content }\n          </div>\n        )}\n      </div>\n    </div>\n\n  );\n};\n\nconst MemoryGame = ({ difficulty }) => {\n  const [cards, setCards] = useState(generateCards(difficulty));\n  const [flippedCards, setflippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  console.log(flippedCards);\n  console.log(matchedCards);\n  useEffect(() => {\n    // Shuffle the cards when the component mounts or when the game restarts\n    setCards(generateCards(difficulty));\n    setflippedCards([]);\n    setMatchedCards([]);\n  }, [difficulty]);\n\n  const handleCardClick = (index) => {\n    // Check if the clicked card is already flipped\n    if (\n      flippedCards.includes(index) ||\n      flippedCards.length === 3 ||\n      matchedCards.some((matched) => matched.indexes.includes(index))\n    ) {\n      return;\n    }\n  \n    // Flip the clicked card\n    setflippedCards([...flippedCards, index]);\n  \n    if (flippedCards.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedCards[0]];\n      const card2 = cards[flippedCards[1]];\n      const card3 = cards[index];\n  \n      if (card1 === card2 && card2 === card3) {\n        const matchedContent = [card1, card2, card3];\n        const matchedIndexes = [...flippedCards, index];\n        setMatchedCards((prevMatchedCards) => [\n          ...prevMatchedCards,\n          { content: matchedContent, indexes: matchedIndexes },\n        ]);\n        console.log('cards matched');\n        setflippedCards([]);\n      }else{\n        console.log('cards mismatched');\n        \n      }\n  \n      setTimeout(() => {\n        if(card1 == card2 && card2 === card3){\n          setflippedCards([]);\n        }else{\n          setflippedCards([]);\n        }\n      }, 1000);\n    }\n  };\n  \n\n  return (\n  <div className='flex flex-wrap'>\n    {cards.map((symbol, index) => (\n        <Card\n          key={index}\n          content={symbol}\n          isFlipped={flippedCards.includes(index)}\n          isMatched={matchedCards.some((matched) => matched.indexes.includes(index))}\n          onClick={() => handleCardClick(index)}\n        />\n      ))}\n  </div>\n);\n};\n\nexport default MemoryGame;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnD,MAAMC,YAAY,GAAIC,KAAK,IAAK;EAC9B,MAAMC,aAAa,GAAG,CAAC,GAAGD,KAAK,CAAC;EAChC,KAAK,IAAIE,CAAC,GAAGD,aAAa,CAACE,MAAM,GAAG,CAAC,EAAED,CAAC,GAAG,CAAC,EAAEA,CAAC,EAAE,EAAE;IACjD,MAAME,CAAC,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,CAAC,CAAC,IAAIL,CAAC,GAAG,CAAC,CAAC,CAAC;IAC7C,CAACD,aAAa,CAACC,CAAC,CAAC,EAAED,aAAa,CAACG,CAAC,CAAC,CAAC,GAAG,CAACH,aAAa,CAACG,CAAC,CAAC,EAAEH,aAAa,CAACC,CAAC,CAAC,CAAC;EAC7E;EACA,OAAOD,aAAa;AACtB,CAAC;AAED,MAAMO,aAAa,GAAIC,UAAU,IAAK;EACpC,MAAMC,OAAO,GAAG,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC;EAC5E,MAAMC,SAAS,GAAGF,UAAU,GAAGA,UAAU;EACzC,MAAMG,UAAU,GAAGD,SAAS,GAAG,CAAC,CAAC,CAAC;EAClC,MAAME,UAAU,GAAGF,SAAS,GAAG,CAAC;;EAEhC;EACA,IAAIG,KAAK,GAAGJ,OAAO,CAACK,KAAK,CAAC,CAAC,EAAEH,UAAU,CAAC,CAACI,OAAO,CAAEC,MAAM,IAAKC,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAACF,MAAM,CAAC,CAAC;;EAEnF;EACAH,KAAK,GAAGA,KAAK,CAACM,MAAM,CAACF,KAAK,CAACL,UAAU,CAAC,CAACM,IAAI,CAAC,OAAO,CAAC,CAAC;;EAErD;EACA,OAAOpB,YAAY,CAACe,KAAK,CAAC;AAC5B,CAAC;AAED,MAAMO,IAAI,GAAGA,CAAC;EAAEC,OAAO;EAAEC,SAAS;EAAEC,SAAS;EAAEC;AAAQ,CAAC,KAAK;EAC3D;IAAA;IACE;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA3B,OAAA;MACE4B,SAAS,EAAG,qDAAqD;MACjED,OAAO,EAAEA,CAAA,KAAM,CAACD,SAAS,IAAIC,OAAO,CAAC,CAAE,CAAC;MAAA;MACxCE,KAAK,EAAE;QACLC,OAAO,EAAEJ,SAAS,GAAG,GAAG,GAAG,CAAC,CAAE;MAChC,CAAE;MAAAK,QAAA,eAEF/B,OAAA;QAAK4B,SAAS,EAAG,oKAAmKH,SAAS,IAAI,CAACC,SAAS,GAAG,6BAA6B,GAAIA,SAAS,GAAG,cAAc,GAAG,EAAI,EAAE;QAAAK,QAAA,EAC/QN,SAAS,GAAG,EAAE,gBACbzB,OAAA;UAAK4B,SAAS,EAAG,0LAA0L;UAAAG,QAAA,EACxMN,SAAS,GAAG,EAAE,GAAGD;QAAO;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACtB;MACN;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC;AAGV,CAAC;AAACC,EAAA,GA/BIb,IAAI;AAiCV,MAAMc,UAAU,GAAGA,CAAC;EAAE1B;AAAW,CAAC,KAAK;EAAA2B,EAAA;EACrC,MAAM,CAACtB,KAAK,EAAEuB,QAAQ,CAAC,GAAG1C,QAAQ,CAACa,aAAa,CAACC,UAAU,CAAC,CAAC;EAC7D,MAAM,CAAC6B,YAAY,EAAEC,eAAe,CAAC,GAAG5C,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAAC6C,YAAY,EAAEC,eAAe,CAAC,GAAG9C,QAAQ,CAAC,EAAE,CAAC;EACpD+C,OAAO,CAACC,GAAG,CAACL,YAAY,CAAC;EACzBI,OAAO,CAACC,GAAG,CAACH,YAAY,CAAC;EACzB5C,SAAS,CAAC,MAAM;IACd;IACAyC,QAAQ,CAAC7B,aAAa,CAACC,UAAU,CAAC,CAAC;IACnC8B,eAAe,CAAC,EAAE,CAAC;IACnBE,eAAe,CAAC,EAAE,CAAC;EACrB,CAAC,EAAE,CAAChC,UAAU,CAAC,CAAC;EAEhB,MAAMmC,eAAe,GAAIC,KAAK,IAAK;IACjC;IACA,IACEP,YAAY,CAACQ,QAAQ,CAACD,KAAK,CAAC,IAC5BP,YAAY,CAACnC,MAAM,KAAK,CAAC,IACzBqC,YAAY,CAACO,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,OAAO,CAACH,QAAQ,CAACD,KAAK,CAAC,CAAC,EAC/D;MACA;IACF;;IAEA;IACAN,eAAe,CAAC,CAAC,GAAGD,YAAY,EAAEO,KAAK,CAAC,CAAC;IAEzC,IAAIP,YAAY,CAACnC,MAAM,KAAK,CAAC,EAAE;MAC7B;MACA,MAAM+C,KAAK,GAAGpC,KAAK,CAACwB,YAAY,CAAC,CAAC,CAAC,CAAC;MACpC,MAAMa,KAAK,GAAGrC,KAAK,CAACwB,YAAY,CAAC,CAAC,CAAC,CAAC;MACpC,MAAMc,KAAK,GAAGtC,KAAK,CAAC+B,KAAK,CAAC;MAE1B,IAAIK,KAAK,KAAKC,KAAK,IAAIA,KAAK,KAAKC,KAAK,EAAE;QACtC,MAAMC,cAAc,GAAG,CAACH,KAAK,EAAEC,KAAK,EAAEC,KAAK,CAAC;QAC5C,MAAME,cAAc,GAAG,CAAC,GAAGhB,YAAY,EAAEO,KAAK,CAAC;QAC/CJ,eAAe,CAAEc,gBAAgB,IAAK,CACpC,GAAGA,gBAAgB,EACnB;UAAEjC,OAAO,EAAE+B,cAAc;UAAEJ,OAAO,EAAEK;QAAe,CAAC,CACrD,CAAC;QACFZ,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;QAC5BJ,eAAe,CAAC,EAAE,CAAC;MACrB,CAAC,MAAI;QACHG,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MAEjC;MAEAa,UAAU,CAAC,MAAM;QACf,IAAGN,KAAK,IAAIC,KAAK,IAAIA,KAAK,KAAKC,KAAK,EAAC;UACnCb,eAAe,CAAC,EAAE,CAAC;QACrB,CAAC,MAAI;UACHA,eAAe,CAAC,EAAE,CAAC;QACrB;MACF,CAAC,EAAE,IAAI,CAAC;IACV;EACF,CAAC;EAGD,oBACAzC,OAAA;IAAK4B,SAAS,EAAC,gBAAgB;IAAAG,QAAA,EAC5Bf,KAAK,CAAC2C,GAAG,CAAC,CAACxC,MAAM,EAAE4B,KAAK,kBACrB/C,OAAA,CAACuB,IAAI;MAEHC,OAAO,EAAEL,MAAO;MAChBM,SAAS,EAAEe,YAAY,CAACQ,QAAQ,CAACD,KAAK,CAAE;MACxCrB,SAAS,EAAEgB,YAAY,CAACO,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,OAAO,CAACH,QAAQ,CAACD,KAAK,CAAC,CAAE;MAC3EpB,OAAO,EAAEA,CAAA,KAAMmB,eAAe,CAACC,KAAK;IAAE,GAJjCA,KAAK;MAAAf,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAKX,CACF;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAER,CAAC;AAACG,EAAA,CAtEID,UAAU;AAAAuB,GAAA,GAAVvB,UAAU;AAwEhB,eAAeA,UAAU;AAAC,IAAAD,EAAA,EAAAwB,GAAA;AAAAC,YAAA,CAAAzB,EAAA;AAAAyB,YAAA,CAAAD,GAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}