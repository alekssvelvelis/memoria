{"ast":null,"code":"import React,{useState,useEffect}from'react';import GameBoard from'./GameBoard';import GameInfo from'./GameInfo';import ResultScreen from'./ResultScreen';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";const isLoggedInObject=localStorage.getItem('token');const isLoggedIn=isLoggedInObject?JSON.parse(isLoggedInObject).value:null;// console.log(isLoggedIn);\nconst shuffleArray=array=>{const shuffledArray=[...array];for(let i=shuffledArray.length-1;i>0;i--){const j=Math.floor(Math.random()*(i+1));[shuffledArray[i],shuffledArray[j]]=[shuffledArray[j],shuffledArray[i]];}return shuffledArray;};const generateCards=(difficulty,theme)=>{const symbols=['1','2','3','4','5','6','7','8','9','10','1','12','13','14','15','16'];const cardCount=difficulty*difficulty;const pairsCount=cardCount/3;const jokerCount=cardCount%3;let cards=symbols.slice(0,pairsCount).flatMap(symbol=>Array(3).fill(symbol));cards=cards.concat(Array(jokerCount).fill('Joker'));cards=shuffleArray(cards);const imageFolderPath=\"images/\".concat(theme,\"/\");return cards.map(card=>card==='Joker'?\"/\".concat(imageFolderPath,\"joker.jpeg\"):\"/\".concat(imageFolderPath).concat(card,\".jpeg\"));};const MemoryGame=_ref=>{let{difficulty,theme}=_ref;function calculateTimeForDifficulty(difficulty){let timeInSeconds;switch(difficulty){case 3:timeInSeconds=3;break;case 4:timeInSeconds=60;break;case 5:timeInSeconds=180;break;case 6:timeInSeconds=240;break;case 7:timeInSeconds=300;break;default:timeInSeconds=240;break;}return timeInSeconds;}const[totalPairs,setTotalPairs]=useState(difficulty*difficulty/3);const[diffToPlay,setDiffToPlay]=useState(difficulty);const[cards,setCards]=useState(generateCards(diffToPlay,theme));const[flippedCards,setFlippedCards]=useState([]);const[matchedCards,setMatchedCards]=useState([]);const[initialReveal,setInitialReveal]=useState(true);const[timeLeft,updateTimeLeft]=useState(calculateTimeForDifficulty(diffToPlay));const[currentTurnCount,setTurnCount]=useState(0);const[gameEnded,setGameEnded]=useState(false);const[gameOutcome,setGameOutcome]=useState(0);const[achievements,setAchievements]=useState('');useEffect(()=>{// for starting the game originally\nsetCards(generateCards(diffToPlay,theme));setFlippedCards([]);setMatchedCards([]);setInitialReveal(true);const revealTimeout=setTimeout(()=>{setInitialReveal(false);},diffToPlay>4?6000:3000);return()=>clearTimeout(revealTimeout);},[diffToPlay,theme]);useEffect(()=>{//for ending the game\nif(!initialReveal&&timeLeft>0&&!gameEnded){if(matchedCards.length===totalPairs){console.log('You win!');setGameEnded(true);setGameOutcome(1);handleSaveGame(1);}else{const remainingUnmatchedCards=cards.filter((symbol,index)=>!flippedCards.includes(index)&&!matchedCards.some(matched=>matched.indexes.includes(index)));if(remainingUnmatchedCards.length===1&&remainingUnmatchedCards[0]===\"/images/\".concat(theme,\"/joker.jpeg\")){console.log('You win! Only the Joker is left.');setGameEnded(true);setGameOutcome(1);handleSaveGame(1);}}}else if(!initialReveal&&(timeLeft===0||timeLeft<0)){console.log('You lose!');setGameEnded(true);setGameOutcome(0);handleSaveGame(0);}},[initialReveal,timeLeft,matchedCards,totalPairs,cards,flippedCards]);useEffect(()=>{//for checking matches and playing the game\nif(!initialReveal&&timeLeft>0&&gameEnded!==true){const timerInterval=setInterval(()=>{if(gameEnded!==true){updateTimeLeft(prevTime=>prevTime-1);}},1000);return()=>clearInterval(timerInterval);}},[initialReveal,timeLeft,gameEnded,matchedCards,totalPairs]);const handleCardClick=index=>{if(initialReveal||gameEnded){return;}// Check if the clicked card is already flipped\nif(flippedCards.includes(index)||flippedCards.length===3||matchedCards.some(matched=>matched.indexes.includes(index))){return;}// Flip the clicked card\nsetFlippedCards([...flippedCards,index]);if(flippedCards.length===2){// Check for a match\nconst card1=cards[flippedCards[0]];const card2=cards[flippedCards[1]];const card3=cards[index];if(card1===card2&&card2===card3){const matchedContent=[card1,card2,card3];const matchedIndexes=[...flippedCards,index];setMatchedCards(prevMatchedCards=>[...prevMatchedCards,{content:matchedContent,indexes:matchedIndexes}]);}setTurnCount(prevTurnCount=>prevTurnCount+1);setTimeout(()=>{setFlippedCards([]);},500);}};const resetGame=(newDifficulty,newTheme)=>{setGameEnded(false);setTurnCount(0);updateTimeLeft(calculateTimeForDifficulty(newDifficulty));setFlippedCards([]);setMatchedCards([]);setInitialReveal(true);setTotalPairs(newDifficulty*newDifficulty/3);setCards(generateCards(newDifficulty,newTheme));const revealTimeout=setTimeout(()=>{setInitialReveal(false);},newDifficulty>4?6000:3000);return()=>clearTimeout(revealTimeout);};const handlePlayAgain=()=>{resetGame(diffToPlay,theme);};const handleNextLevel=()=>{const nextDifficulty=diffToPlay+1;setDiffToPlay(nextDifficulty);resetGame(nextDifficulty,theme);};const formattedTime=\"\".concat(Math.floor(timeLeft/60),\":\").concat((timeLeft%60).toLocaleString('en-US',{minimumIntegerDigits:2}));const handleSaveGame=async outcome=>{const formData={turn_count:currentTurnCount,pair_count:matchedCards.length,time:timeLeft,difficulty:diffToPlay,theme:theme,gameOutcome:outcome,moneyEarned:100+timeLeft*2+matchedCards.length*10};try{const response=await fetch('http://localhost/api/save-played-game',{method:'POST',headers:{\"Content-Type\":\"application/json\",'Authorization':\"Bearer \".concat(isLoggedIn)},body:JSON.stringify(formData)});const responseData=await response.json();if(!response.ok){console.error('Error:',responseData);}else{console.log('game saved successfully');}}catch(error){console.error('Error:',error);}try{const response=await fetch('http://localhost/api/saveClearedLevel',{method:'POST',headers:{\"Content-Type\":\"application/json\",'Authorization':\"Bearer \".concat(isLoggedIn)},body:JSON.stringify(formData)});const responseData=await response.json();if(!response.ok){console.error('Error:',responseData);}else{console.log(responseData.message);}}catch(error){console.error('Error:',error);}try{const response=await fetch('http://localhost/api/checkAndAwardAchievement',{method:'POST',headers:{\"Content-Type\":\"application/json\",'Authorization':\"Bearer \".concat(isLoggedIn)},body:JSON.stringify(formData)});const responseData=await response.json();if(!response.ok){console.error('Error:',responseData);}else{console.log(responseData);if(responseData.message==='User already has all available achievements or no achievements were awarded'){setAchievements('');}else{setAchievements(responseData.message);}}}catch(error){console.error('Error:',error);}try{const moneyEarned=100+timeLeft*2+matchedCards.length*10;const response=await fetch('http://localhost/api/updateUserMoney',{method:'POST',headers:{\"Content-Type\":\"application/json\",'Authorization':\"Bearer \".concat(isLoggedIn)},body:JSON.stringify({moneyEarned})});const responseData=await response.json();if(!response.ok){console.error('Error:',responseData);}else{console.log(responseData.message);}}catch(error){console.error('Error:',error);}};return/*#__PURE__*/_jsx(_Fragment,{children:/*#__PURE__*/_jsxs(\"div\",{className:\"overflow-y-scroll min-h-screen bg-[rgb(18,18,18,0.9)] flex justify-center w-full text-white flex-col\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-[10vh]\"}),/*#__PURE__*/_jsx(\"div\",{className:\"w-full h-full flex flex-col justify-center items-center\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"flex flex-col w-full  h-full items-center justify-center overflow-x-hidden\",children:[/*#__PURE__*/_jsx(GameInfo,{currentTime:formattedTime,currentTurnCount:currentTurnCount,selectedTheme:theme}),gameEnded===true&&/*#__PURE__*/_jsx(ResultScreen,{time:formattedTime,turns:currentTurnCount,gamestate:gameOutcome,pairs:matchedCards.length,onPlayAgain:handlePlayAgain,onNextLevel:handleNextLevel,difficulty:diffToPlay,achievements:achievements,moneyEarned:100+timeLeft*2+matchedCards.length*10}),/*#__PURE__*/_jsx(GameBoard,{cards:cards,flippedCards:flippedCards,matchedCards:matchedCards,initialReveal:initialReveal,difficulty:diffToPlay,handleCardClick:handleCardClick,gameEnded:gameEnded})]})})]})});};export default MemoryGame;","map":{"version":3,"names":["React","useState","useEffect","GameBoard","GameInfo","ResultScreen","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","isLoggedInObject","localStorage","getItem","isLoggedIn","JSON","parse","value","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","generateCards","difficulty","theme","symbols","cardCount","pairsCount","jokerCount","cards","slice","flatMap","symbol","Array","fill","concat","imageFolderPath","map","card","MemoryGame","_ref","calculateTimeForDifficulty","timeInSeconds","totalPairs","setTotalPairs","diffToPlay","setDiffToPlay","setCards","flippedCards","setFlippedCards","matchedCards","setMatchedCards","initialReveal","setInitialReveal","timeLeft","updateTimeLeft","currentTurnCount","setTurnCount","gameEnded","setGameEnded","gameOutcome","setGameOutcome","achievements","setAchievements","revealTimeout","setTimeout","clearTimeout","console","log","handleSaveGame","remainingUnmatchedCards","filter","index","includes","some","matched","indexes","timerInterval","setInterval","prevTime","clearInterval","handleCardClick","card1","card2","card3","matchedContent","matchedIndexes","prevMatchedCards","content","prevTurnCount","resetGame","newDifficulty","newTheme","handlePlayAgain","handleNextLevel","nextDifficulty","formattedTime","toLocaleString","minimumIntegerDigits","outcome","formData","turn_count","pair_count","time","moneyEarned","response","fetch","method","headers","body","stringify","responseData","json","ok","error","message","children","className","currentTime","selectedTheme","turns","gamestate","pairs","onPlayAgain","onNextLevel"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport GameBoard from './GameBoard';\nimport GameInfo from './GameInfo';\nimport ResultScreen from './ResultScreen';\nconst isLoggedInObject = localStorage.getItem('token');\nconst isLoggedIn = isLoggedInObject ? JSON.parse(isLoggedInObject).value : null;\n// console.log(isLoggedIn);\nconst shuffleArray = (array) => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\nconst generateCards = (difficulty, theme) => {\n  const symbols = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '1', '12', '13', '14', '15', '16'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3;\n  const jokerCount = cardCount % 3;\n\n  let cards = symbols.slice(0, pairsCount).flatMap((symbol) => Array(3).fill(symbol));\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n  cards = shuffleArray(cards);\n\n  const imageFolderPath = `images/${theme}/`;\n  return cards.map((card) => (card === 'Joker' ? `/${imageFolderPath}joker.jpeg` : `/${imageFolderPath}${card}.jpeg`));\n};\n\nconst MemoryGame = ({ difficulty, theme }) => {\n  function calculateTimeForDifficulty(difficulty) {\n    let timeInSeconds;\n    \n    switch (difficulty) {\n        case 3:\n            timeInSeconds = 3;\n            break;\n        case 4:\n            timeInSeconds = 60;\n            break;\n        case 5:\n            timeInSeconds = 180;\n            break;\n        case 6:\n            timeInSeconds = 240;\n            break;\n        case 7:\n            timeInSeconds = 300;\n            break;\n        default:\n            timeInSeconds = 240;\n            break;\n    }\n    \n    return timeInSeconds;\n}\n  const [totalPairs, setTotalPairs] = useState(difficulty * difficulty / 3);\n  const [diffToPlay, setDiffToPlay] =  useState(difficulty)\n  const [cards, setCards] = useState(generateCards(diffToPlay, theme));\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [initialReveal, setInitialReveal] = useState(true);\n  const [timeLeft, updateTimeLeft] = useState(calculateTimeForDifficulty(diffToPlay));\n  const [currentTurnCount, setTurnCount] = useState(0);\n  const [gameEnded, setGameEnded] = useState(false);\n  const [gameOutcome, setGameOutcome] = useState(0);\n  const [achievements, setAchievements] = useState('');\n\n  useEffect(() => { // for starting the game originally\n    setCards(generateCards(diffToPlay, theme));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, diffToPlay > 4 ? 6000 : 3000);\n\n    return () => clearTimeout(revealTimeout);\n  }, [diffToPlay, theme]);\n\n  useEffect(() => { //for ending the game\n    if (!initialReveal && timeLeft > 0 && !gameEnded) {\n      if (matchedCards.length === totalPairs) {\n        console.log('You win!');\n        setGameEnded(true);\n        setGameOutcome(1);\n        handleSaveGame(1);\n      } else {\n        const remainingUnmatchedCards = cards.filter(\n          (symbol, index) =>\n            !flippedCards.includes(index) &&\n            !matchedCards.some((matched) => matched.indexes.includes(index))\n        );\n        if (remainingUnmatchedCards.length === 1 && remainingUnmatchedCards[0] === `/images/${theme}/joker.jpeg`) {\n          console.log('You win! Only the Joker is left.');\n          setGameEnded(true);\n          setGameOutcome(1);\n          handleSaveGame(1);\n        }\n      }\n    } else if (!initialReveal && (timeLeft === 0 || timeLeft < 0)) {\n      console.log('You lose!');\n      setGameEnded(true);\n      setGameOutcome(0);\n      handleSaveGame(0);\n    }\n  }, [initialReveal, timeLeft, matchedCards, totalPairs, cards, flippedCards]);\n\n\n  useEffect(() => { //for checking matches and playing the game\n    if (!initialReveal && timeLeft > 0 && gameEnded !== true) {\n        const timerInterval = setInterval(() => {\n          if (gameEnded !== true) {\n            updateTimeLeft((prevTime) => prevTime - 1);\n          }\n        }, 1000);\n        return () => clearInterval(timerInterval);\n    }\n  }, [initialReveal, timeLeft, gameEnded, matchedCards, totalPairs]);\n  const handleCardClick = (index) => {\n    if (initialReveal || gameEnded) {\n      return;\n    }\n    // Check if the clicked card is already flipped\n    if (flippedCards.includes(index) || flippedCards.length === 3 || matchedCards.some((matched) => matched.indexes.includes(index))) {\n      return;\n    }\n    // Flip the clicked card\n    setFlippedCards([...flippedCards, index]);\n\n    if (flippedCards.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedCards[0]];\n      const card2 = cards[flippedCards[1]];\n      const card3 = cards[index];\n\n      if (card1 === card2 && card2 === card3) {\n        const matchedContent = [card1, card2, card3];\n        const matchedIndexes = [...flippedCards, index];\n        setMatchedCards((prevMatchedCards) => [...prevMatchedCards, { content: matchedContent, indexes: matchedIndexes }]);\n      }\n      setTurnCount((prevTurnCount) => prevTurnCount + 1);\n\n      setTimeout(() => {\n        setFlippedCards([]);\n      }, 500);\n\n    }\n  };\n\n  const resetGame = (newDifficulty, newTheme) => {\n    setGameEnded(false);\n    setTurnCount(0);\n    updateTimeLeft(calculateTimeForDifficulty(newDifficulty));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n    setTotalPairs(newDifficulty * newDifficulty / 3);\n    setCards(generateCards(newDifficulty, newTheme));\n  \n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, newDifficulty > 4 ? 6000 : 3000);\n  \n    return () => clearTimeout(revealTimeout);\n  };\n  \n  const handlePlayAgain = () => {\n    resetGame(diffToPlay, theme);\n  };\n  \n  const handleNextLevel = () => {\n    const nextDifficulty = diffToPlay + 1;\n    setDiffToPlay(nextDifficulty);\n    resetGame(nextDifficulty, theme);\n  };\n  \n  const formattedTime = `${Math.floor(timeLeft / 60)}:${(timeLeft % 60).toLocaleString('en-US', { minimumIntegerDigits: 2 })}`;\n\n  const handleSaveGame = async (outcome) => {\n\n    const formData = {\n      turn_count: currentTurnCount,\n      pair_count: matchedCards.length,\n      time: timeLeft,\n      difficulty: diffToPlay,\n      theme: theme,\n      gameOutcome: outcome,\n      moneyEarned: 100+timeLeft*2+matchedCards.length*10,\n    };\n    \n    try{\n      const response = await fetch('http://localhost/api/save-played-game', {\n          method: 'POST',\n          headers: {\n              \"Content-Type\": \"application/json\",\n              'Authorization': `Bearer ${isLoggedIn}`\n          },\n          body: JSON.stringify(formData),\n      });\n      const responseData = await response.json();\n      if (!response.ok) {\n          console.error('Error:', responseData);\n      } else {\n          console.log('game saved successfully');\n      }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n\n    try{\n      const response = await fetch('http://localhost/api/saveClearedLevel', {\n          method: 'POST',\n          headers: {\n              \"Content-Type\": \"application/json\",\n              'Authorization': `Bearer ${isLoggedIn}`\n          },\n          body: JSON.stringify(formData),\n      });\n      const responseData = await response.json();\n      if (!response.ok) {\n          console.error('Error:', responseData);\n      } else {\n          console.log(responseData.message);\n      }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n\n    try{\n      const response = await fetch('http://localhost/api/checkAndAwardAchievement', {\n          method: 'POST',\n          headers: {\n              \"Content-Type\": \"application/json\",\n              'Authorization': `Bearer ${isLoggedIn}`\n          },\n          body: JSON.stringify(formData),\n      });\n      const responseData = await response.json();\n      if (!response.ok) {\n          console.error('Error:', responseData);\n      } else {\n          console.log(responseData);\n          if(responseData.message === 'User already has all available achievements or no achievements were awarded'){\n            setAchievements('');\n          }else{\n            setAchievements(responseData.message);\n          }\n      }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n    try{\n      const moneyEarned = 100+timeLeft*2+matchedCards.length*10\n      const response = await fetch('http://localhost/api/updateUserMoney', {\n          method: 'POST',\n          headers: {\n              \"Content-Type\": \"application/json\",\n              'Authorization': `Bearer ${isLoggedIn}`\n          },\n          body: JSON.stringify({moneyEarned}),\n      });\n      const responseData = await response.json();\n      if (!response.ok) {\n          console.error('Error:', responseData);\n      }else{\n        console.log(responseData.message);\n      }\n    } catch (error) {\n        console.error('Error:', error);\n    }\n  }\n\n  return (\n    <>\n    <div className=\"overflow-y-scroll min-h-screen bg-[rgb(18,18,18,0.9)] flex justify-center w-full text-white flex-col\">\n      <div className='w-full h-[10vh]'></div>\n      <div className='w-full h-full flex flex-col justify-center items-center'>\n        <div className='flex flex-col w-full  h-full items-center justify-center overflow-x-hidden'>\n          <GameInfo currentTime={formattedTime} currentTurnCount={currentTurnCount} selectedTheme={theme}/>\n          {gameEnded === true && <ResultScreen time={formattedTime} turns={currentTurnCount} gamestate={gameOutcome} pairs={matchedCards.length} onPlayAgain={handlePlayAgain}\n                        onNextLevel={handleNextLevel} difficulty={diffToPlay} achievements={achievements} moneyEarned={100+timeLeft*2+matchedCards.length*10}/>}\n          <GameBoard cards={cards} flippedCards={flippedCards} matchedCards={matchedCards} initialReveal={initialReveal} difficulty={diffToPlay} handleCardClick={handleCardClick} gameEnded={gameEnded}/>\n        </div>\n      </div>\n    </div>\n    </>\n  );\n};\n\nexport default MemoryGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}