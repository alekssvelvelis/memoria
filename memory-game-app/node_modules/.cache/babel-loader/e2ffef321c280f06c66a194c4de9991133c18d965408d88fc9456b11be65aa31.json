{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/GameBoard.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameBoard(cards, flippedCards, matchedCards, initialReveal, difficulty, handleCardClick, getGridScale) {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `flex items-center justify-center grid grid-cols-${difficulty} gap-3 mb-6 mt-2`,\n    children: cards.map((symbol, index) => /*#__PURE__*/_jsxDEV(Card, {\n      content: symbol,\n      isFlipped: initialReveal || flippedCards.includes(index) || matchedCards.some(matched => matched.indexes.includes(index)),\n      isMatched: matchedCards.some(matched => matched.indexes.includes(index)),\n      onClick: () => handleCardClick(index),\n      cardSize: getGridScale(difficulty)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 17\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 5,\n    columnNumber: 9\n  }, this);\n}\n_c = GameBoard;\nexport default GameBoard();\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","GameBoard","cards","flippedCards","matchedCards","initialReveal","difficulty","handleCardClick","getGridScale","className","children","map","symbol","index","Card","content","isFlipped","includes","some","matched","indexes","isMatched","onClick","cardSize","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/GameBoard.jsx"],"sourcesContent":["import React from 'react';\n\nfunction GameBoard( cards, flippedCards, matchedCards, initialReveal, difficulty, handleCardClick, getGridScale){\n    return(\n        <div className={`flex items-center justify-center grid grid-cols-${difficulty} gap-3 mb-6 mt-2`}>\n            {cards.map((symbol, index) => (\n                <Card\n                key={index}\n                content={symbol}\n                isFlipped={initialReveal || flippedCards.includes(index) || matchedCards.some((matched) => matched.indexes.includes(index))}\n                isMatched={matchedCards.some((matched) => matched.indexes.includes(index))}\n                onClick={() => handleCardClick(index)}\n                cardSize={getGridScale(difficulty)}\n                />\n            ))}\n        </div>\n    );\n}\n\nexport default GameBoard();"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,SAASA,CAAEC,KAAK,EAAEC,YAAY,EAAEC,YAAY,EAAEC,aAAa,EAAEC,UAAU,EAAEC,eAAe,EAAEC,YAAY,EAAC;EAC5G,oBACIR,OAAA;IAAKS,SAAS,EAAG,mDAAkDH,UAAW,kBAAkB;IAAAI,QAAA,EAC3FR,KAAK,CAACS,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,kBACrBb,OAAA,CAACc,IAAI;MAELC,OAAO,EAAEH,MAAO;MAChBI,SAAS,EAAEX,aAAa,IAAIF,YAAY,CAACc,QAAQ,CAACJ,KAAK,CAAC,IAAIT,YAAY,CAACc,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,OAAO,CAACH,QAAQ,CAACJ,KAAK,CAAC,CAAE;MAC5HQ,SAAS,EAAEjB,YAAY,CAACc,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,OAAO,CAACH,QAAQ,CAACJ,KAAK,CAAC,CAAE;MAC3ES,OAAO,EAAEA,CAAA,KAAMf,eAAe,CAACM,KAAK,CAAE;MACtCU,QAAQ,EAAEf,YAAY,CAACF,UAAU;IAAE,GAL9BO,KAAK;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAMT,CACJ;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACD,CAAC;AAEd;AAACC,EAAA,GAfQ3B,SAAS;AAiBlB,eAAeA,SAAS,CAAC,CAAC;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}