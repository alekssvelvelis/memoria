{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\nconst generateCards = (difficulty, theme) => {\n  const symbols = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '1', '12', '13', '14', '15', '16'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap(symbol => Array(3).fill(symbol));\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n  cards = shuffleArray(cards);\n  const imageFolderPath = `images/${theme}/`; // Updated path to images in the public folder\n  cards = cards.map(card => {\n    if (card === 'Joker') {\n      return `/${imageFolderPath}joker.jpeg`;\n    } else {\n      return `/${imageFolderPath}${card}.jpeg`;\n    }\n  });\n  return cards;\n};\nconst MemoryGame = ({\n  difficulty,\n  theme\n}) => {\n  _s();\n  const totalPairs = difficulty * difficulty / 3;\n  const [cards, setCards] = useState(generateCards(difficulty, theme));\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [initialReveal, setInitialReveal] = useState(true);\n  const [timeLeft, updateTimeLeft] = useState(240);\n  const [currentTurnCount, setTurnCount] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  useEffect(() => {\n    setCards(generateCards(difficulty, theme));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, 2500);\n    return () => clearTimeout(revealTimeout);\n  }, [difficulty]);\n  useEffect(() => {\n    if (!initialReveal && timeLeft > 0) {\n      if (matchedCards.length === totalPairs) {\n        console.log('You win!');\n        setGameOver(true);\n      } else {\n        const remainingUnmatchedCards = cards.filter(index => !flippedCards.includes(index) && !matchedCards.some(matched => matched.indexes.includes(index)));\n        if (remainingUnmatchedCards.length === 1 && remainingUnmatchedCards[0] === `/images/${theme}/joker.jpeg`) {\n          console.log('You win! Only the Joker is left.');\n          setGameOver(true);\n        }\n      }\n    } else if (!initialReveal && (timeLeft === 0 || timeLeft < 0)) {\n      console.log('You lose!');\n      setGameOver(true);\n    }\n  }, [initialReveal, timeLeft, matchedCards, totalPairs, cards, flippedCards]);\n  useEffect(() => {\n    if (!initialReveal && timeLeft > 0) {\n      if (gameOver != true) {\n        const timerInterval = setInterval(() => {\n          updateTimeLeft(prevTime => prevTime - 1);\n        }, 1000);\n        return () => clearInterval(timerInterval);\n      }\n    }\n  }, [initialReveal, timeLeft, matchedCards, totalPairs]);\n  const handleCardClick = index => {\n    if (initialReveal || gameOver) {\n      return;\n    }\n    if (flippedCards.includes(index) || flippedCards.length === 3 || matchedCards.some(matched => matched.indexes.includes(index))) {\n      return;\n    }\n    // Flip the clicked card\n    setFlippedCards([...flippedCards, index]);\n    if (flippedCards.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedCards[0]];\n      const card2 = cards[flippedCards[1]];\n      const card3 = cards[index];\n      if (card1 === card2 && card2 === card3) {\n        const matchedContent = [card1, card2, card3];\n        const matchedIndexes = [...flippedCards, index];\n        setMatchedCards(prevMatchedCards => [...prevMatchedCards, {\n          content: matchedContent,\n          indexes: matchedIndexes\n        }]);\n        console.log('cards matched');\n        setFlippedCards([]);\n        setTurnCount(currentTurnCount + 1);\n      } else {\n        console.log('cards mismatched');\n        setTurnCount(currentTurnCount + 1);\n      }\n      setTimeout(() => {\n        setFlippedCards([]);\n      }, 1000);\n    }\n  };\n  const formattedTime = `${Math.floor(timeLeft / 60)}:${(timeLeft % 60).toLocaleString('en-US', {\n    minimumIntegerDigits: 2\n  })}`;\n  function getGridScale(difficulty) {\n    let baseScale = 0.12;\n    switch (difficulty) {\n      case 3:\n        baseScale *= 1.6;\n        break;\n      case 4:\n        baseScale *= 1.6;\n        break;\n      case 5:\n        baseScale *= 1.25;\n        break;\n      case 6:\n        baseScale *= 1.11;\n        break;\n      case 7:\n        baseScale *= 0.98;\n        break;\n      default:\n        break;\n    }\n    return Math.min(window.innerWidth * baseScale, 100);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-y-scroll min-h-screen bg-[rgb(18,18,18,0.9)] flex justify-center w-full text-white flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-[10vh]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full flex flex-col justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col w-full  h-full items-center justify-center overflow-x-hidden\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-around w-1/2 max-[425px]:w-full m-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Timer: \", formattedTime]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Turns: \", currentTurnCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 163,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Theme: \", theme]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 164,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex items-center justify-center grid grid-cols-${difficulty} gap-3 mb-4`,\n          children: cards.map((symbol, index) => /*#__PURE__*/_jsxDEV(Card, {\n            content: symbol,\n            isFlipped: initialReveal || flippedCards.includes(index) || matchedCards.some(matched => matched.indexes.includes(index)),\n            isMatched: matchedCards.some(matched => matched.indexes.includes(index)),\n            onClick: () => handleCardClick(index),\n            cardSize: getGridScale(difficulty)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 168,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 157,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryGame, \"JQdpkrc4sNqwzXCXMxHE49Hsohc=\");\n_c = MemoryGame;\nexport default MemoryGame;\nvar _c;\n$RefreshReg$(_c, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","Card","jsxDEV","_jsxDEV","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","generateCards","difficulty","theme","symbols","cardCount","pairsCount","jokerCount","cards","slice","flatMap","symbol","Array","fill","concat","imageFolderPath","map","card","MemoryGame","_s","totalPairs","setCards","flippedCards","setFlippedCards","matchedCards","setMatchedCards","initialReveal","setInitialReveal","timeLeft","updateTimeLeft","currentTurnCount","setTurnCount","gameOver","setGameOver","revealTimeout","setTimeout","clearTimeout","console","log","remainingUnmatchedCards","filter","index","includes","some","matched","indexes","timerInterval","setInterval","prevTime","clearInterval","handleCardClick","card1","card2","card3","matchedContent","matchedIndexes","prevMatchedCards","content","formattedTime","toLocaleString","minimumIntegerDigits","getGridScale","baseScale","min","window","innerWidth","className","children","fileName","_jsxFileName","lineNumber","columnNumber","isFlipped","isMatched","onClick","cardSize","_c","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Card from './Card';\nconst shuffleArray = (array) => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\nconst generateCards = (difficulty, theme) => {\n  const symbols = ['1', '2', '3', '4', '5', '6', '7', '8', '9', '10', '1', '12', '13', '14', '15', '16'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap((symbol) => Array(3).fill(symbol));\n\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  cards = shuffleArray(cards);\n\n  const imageFolderPath = `images/${theme}/`; // Updated path to images in the public folder\n  cards = cards.map((card) => {\n    if (card === 'Joker') {\n      return `/${imageFolderPath}joker.jpeg`;\n    } else {\n      return `/${imageFolderPath}${card}.jpeg`;\n    }\n  });\n\n  return cards;\n};\n\nconst MemoryGame = ({ difficulty, theme }) => {\n  const totalPairs = difficulty * difficulty / 3;\n  const [cards, setCards] = useState(generateCards(difficulty, theme));\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [initialReveal, setInitialReveal] = useState(true);\n  const [timeLeft, updateTimeLeft] = useState(240);\n  const [currentTurnCount, setTurnCount] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n\n  useEffect(() => {\n    setCards(generateCards(difficulty, theme));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, 2500);\n\n    return () => clearTimeout(revealTimeout);\n  }, [difficulty]);\n\n  useEffect(() => {\n    if (!initialReveal && timeLeft > 0) {\n      if (matchedCards.length === totalPairs) {\n        console.log('You win!');\n        setGameOver(true);\n      } else {\n        const remainingUnmatchedCards = cards.filter(\n          (index) =>\n            !flippedCards.includes(index) &&\n            !matchedCards.some((matched) => matched.indexes.includes(index))\n        );\n        if (remainingUnmatchedCards.length === 1 && remainingUnmatchedCards[0] === `/images/${theme}/joker.jpeg`) {\n          console.log('You win! Only the Joker is left.');\n          setGameOver(true);\n        }\n      }\n    } else if (!initialReveal && (timeLeft === 0 || timeLeft < 0)) {\n      console.log('You lose!');\n      setGameOver(true);\n    }\n  }, [initialReveal, timeLeft, matchedCards, totalPairs, cards, flippedCards]);\n\n  useEffect(() => {\n    if (!initialReveal && timeLeft > 0) {\n      if(gameOver != true){\n        const timerInterval = setInterval(() => {\n          updateTimeLeft((prevTime) => prevTime - 1);\n        }, 1000);\n        return () => clearInterval(timerInterval);\n      }\n    }\n  }, [initialReveal, timeLeft, matchedCards, totalPairs]);\n  const handleCardClick = (index) => {\n    if (initialReveal || gameOver) {\n      return;\n    }\n    \n    if (flippedCards.includes(index) || flippedCards.length === 3 || matchedCards.some((matched) => matched.indexes.includes(index))) {\n      return;\n    }\n    // Flip the clicked card\n    setFlippedCards([...flippedCards, index]);\n\n    if (flippedCards.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedCards[0]];\n      const card2 = cards[flippedCards[1]];\n      const card3 = cards[index];\n\n      if (card1 === card2 && card2 === card3) {\n        const matchedContent = [card1, card2, card3];\n        const matchedIndexes = [...flippedCards, index];\n        setMatchedCards((prevMatchedCards) => [\n          ...prevMatchedCards,\n          { content: matchedContent, indexes: matchedIndexes },\n        ]);\n        console.log('cards matched');\n        setFlippedCards([]);\n        setTurnCount(currentTurnCount+1);\n      } else {\n        console.log('cards mismatched');\n        setTurnCount(currentTurnCount+1);\n      }\n\n      setTimeout(() => {\n        setFlippedCards([]);\n      }, 1000);\n\n    }\n  };\n  const formattedTime = `${Math.floor(timeLeft / 60)}:${(timeLeft % 60).toLocaleString('en-US', { minimumIntegerDigits: 2 })}`;\n\n  function getGridScale(difficulty) {\n    let baseScale = 0.12\n    switch(difficulty){\n      case 3:\n        baseScale *= 1.6;\n        break;\n      case 4:\n        baseScale *= 1.6;\n        break;\n      case 5:\n        baseScale *= 1.25;\n        break;\n      case 6:\n        baseScale *= 1.11;\n        break;\n      case 7:\n        baseScale *= 0.98;\n        break;\n      default:\n        break;\n    }\n    return Math.min(window.innerWidth * baseScale, 100);\n  }\n\n  return (\n    <div className=\"overflow-y-scroll min-h-screen bg-[rgb(18,18,18,0.9)] flex justify-center w-full text-white flex-col\">\n      <div className='w-full h-[10vh]'></div>\n      <div className='w-full h-full flex flex-col justify-center items-center'>\n        <div className='flex flex-col w-full  h-full items-center justify-center overflow-x-hidden'>\n          <div className='flex justify-around w-1/2 max-[425px]:w-full m-4'>\n            <h1>Timer: {formattedTime}</h1>\n            <h1>Turns: {currentTurnCount}</h1>\n            <h1>Theme: {theme}</h1>\n          </div>\n            <div className={`flex items-center justify-center grid grid-cols-${difficulty} gap-3 mb-4`}>\n            {cards.map((symbol, index) => (\n              <Card\n                key={index}\n                content={symbol}\n                isFlipped={initialReveal || flippedCards.includes(index) || matchedCards.some((matched) => matched.indexes.includes(index))}\n                isMatched={matchedCards.some((matched) => matched.indexes.includes(index))}\n                onClick={() => handleCardClick(index)}\n                cardSize={getGridScale(difficulty)}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MemoryGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}