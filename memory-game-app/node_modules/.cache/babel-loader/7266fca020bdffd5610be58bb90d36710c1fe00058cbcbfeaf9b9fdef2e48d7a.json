{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst shuffleArray = array => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\nconst generateCards = difficulty => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap(symbol => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n  console.log(cards);\n};\nconst Card = ({\n  content,\n  isFlipped,\n  isMatched,\n  onClick\n}) => {\n  const cardSize = Math.min(window.innerWidth * 0.1, 100);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `group rounded-xl [perspective:1000px]`,\n      onClick: () => !isMatched && onClick(),\n      style: {\n        height: `${cardSize}px`,\n        width: `${cardSize}px`,\n        opacity: isMatched ? 0.5 : 1,\n        transition: 'opacity 0.25s ease-in' // Decrease opacity if matched\n      },\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `relative h-full w-full rounded-xl shadow-xl transition-all duration-500 text-slate-200 [transform-style:preserve-3d] [backface-visibility:hidden] ${isFlipped ? '[transform:rotateY(180deg)]' : isMatched ? 'bg-green-500' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"absolute inset-0 flex rounded-xl bg-red-500 justify-center items-center align-center\",\n          children: isFlipped ? content : ''\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `absolute inset-0 h-full w-full rounded-xl bg-red-500 flex justify-center items-center align-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden] `,\n          children: isFlipped ? content : content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_c = Card;\nconst MemoryGame = ({\n  difficulty\n}) => {\n  _s();\n  const gridSize = difficulty;\n  const totalPairs = difficulty * difficulty / 3;\n  const [cards, setCards] = useState(generateCards(difficulty));\n  console.log(cards.length);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [initialReveal, setInitialReveal] = useState(true);\n  const [timeLeft, updateTimeLeft] = useState(240);\n  const [currentTurnCount, setTurnCount] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  // console.log(flippedCards);\n  // console.log(matchedCards);\n\n  useEffect(() => {\n    // Shuffle the cards when the component mounts or when the game restarts\n    setCards(generateCards(difficulty));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, 2500);\n    return () => clearTimeout(revealTimeout);\n  }, [difficulty]);\n  useEffect(() => {\n    if (!initialReveal && timeLeft > 0 && matchedCards.length === totalPairs) {\n      console.log('You win!');\n      alert('You win!');\n      setGameOver(true);\n    }\n    if (!initialReveal && timeLeft === 0 || timeLeft < 0) {\n      console.log('You lose!');\n      alert('You lose!');\n      setGameOver(true);\n    }\n  }, [initialReveal, timeLeft, matchedCards, totalPairs]);\n  useEffect(() => {\n    if (!initialReveal && timeLeft > 0) {\n      if (gameOver != true) {\n        const timerInterval = setInterval(() => {\n          updateTimeLeft(prevTime => prevTime - 1);\n        }, 1000);\n        return () => clearInterval(timerInterval);\n      }\n    }\n  }, [initialReveal, timeLeft, matchedCards, totalPairs]);\n  const handleCardClick = index => {\n    if (initialReveal || gameOver) {\n      return;\n    }\n    // Check if the clicked card is already flipped\n    if (flippedCards.includes(index) || flippedCards.length === 3 || matchedCards.some(matched => matched.indexes.includes(index))) {\n      return;\n    }\n\n    // Flip the clicked card\n    setFlippedCards([...flippedCards, index]);\n    if (flippedCards.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedCards[0]];\n      const card2 = cards[flippedCards[1]];\n      const card3 = cards[index];\n      if (card1 === card2 && card2 === card3) {\n        const matchedContent = [card1, card2, card3];\n        const matchedIndexes = [...flippedCards, index];\n        setMatchedCards(prevMatchedCards => [...prevMatchedCards, {\n          content: matchedContent,\n          indexes: matchedIndexes\n        }]);\n        console.log('cards matched');\n        setFlippedCards([]);\n        setTurnCount(currentTurnCount + 1);\n      } else {\n        console.log('cards mismatched');\n        setTurnCount(currentTurnCount + 1);\n      }\n      setTimeout(() => {\n        setFlippedCards([]);\n      }, 1000);\n    }\n  };\n  const formattedTime = `${Math.floor(timeLeft / 60)}:${(timeLeft % 60).toLocaleString('en-US', {\n    minimumIntegerDigits: 2\n  })}`;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"overflow-y-scroll min-h-screen bg-[rgb(18,18,18,0.9)] flex justify-center w-full text-white flex-col\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-[10vh]\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full h-full flex flex-col justify-center items-center\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex flex-col w-full  h-full items-center justify-center overflow-x-hidden\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-around w-1/2 max-[425px]:w-full m-4\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Timer: \", formattedTime]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 157,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: [\"Turns: \", currentTurnCount]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 158,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: `flex items-center justify-center grid grid-cols-7 gap-3`,\n          children: cards.map((symbol, index) => /*#__PURE__*/_jsxDEV(Card, {\n            content: symbol,\n            isFlipped: initialReveal || flippedCards.includes(index) || matchedCards.some(matched => matched.indexes.includes(index)),\n            isMatched: matchedCards.some(matched => matched.indexes.includes(index)),\n            onClick: () => handleCardClick(index)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 162,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 160,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 155,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 152,\n    columnNumber: 5\n  }, this);\n};\n_s(MemoryGame, \"06c8Ml/h0yqwHvIbcIJIbvMERg8=\");\n_c2 = MemoryGame;\nexport default MemoryGame;\nvar _c, _c2;\n$RefreshReg$(_c, \"Card\");\n$RefreshReg$(_c2, \"MemoryGame\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","shuffleArray","array","shuffledArray","i","length","j","Math","floor","random","generateCards","difficulty","symbols","cardCount","pairsCount","jokerCount","cards","slice","flatMap","symbol","Array","fill","concat","console","log","Card","content","isFlipped","isMatched","onClick","cardSize","min","window","innerWidth","children","className","style","height","width","opacity","transition","fileName","_jsxFileName","lineNumber","columnNumber","_c","MemoryGame","_s","gridSize","totalPairs","setCards","flippedCards","setFlippedCards","matchedCards","setMatchedCards","initialReveal","setInitialReveal","timeLeft","updateTimeLeft","currentTurnCount","setTurnCount","gameOver","setGameOver","revealTimeout","setTimeout","clearTimeout","alert","timerInterval","setInterval","prevTime","clearInterval","handleCardClick","index","includes","some","matched","indexes","card1","card2","card3","matchedContent","matchedIndexes","prevMatchedCards","formattedTime","toLocaleString","minimumIntegerDigits","map","_c2","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/MemoryGame.jsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst shuffleArray = (array) => {\n  const shuffledArray = [...array];\n  for (let i = shuffledArray.length - 1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [shuffledArray[i], shuffledArray[j]] = [shuffledArray[j], shuffledArray[i]];\n  }\n  return shuffledArray;\n};\n\nconst generateCards = (difficulty) => {\n  const symbols = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P'];\n  const cardCount = difficulty * difficulty;\n  const pairsCount = cardCount / 3; // Assuming you want 3 matching pairs for each difficulty\n  const jokerCount = cardCount % 3;\n\n  // Create an array with pairs of symbols\n  let cards = symbols.slice(0, pairsCount).flatMap((symbol) => Array(3).fill(symbol));\n\n  // Add joker cards\n  cards = cards.concat(Array(jokerCount).fill('Joker'));\n\n  // Shuffle the cards\n  return shuffleArray(cards);\n  console.log(cards);\n};\nconst Card = ({ content, isFlipped, isMatched, onClick }) => {\n const cardSize = Math.min(window.innerWidth * 0.1, 100);\n  return (\n    <>\n      <div\n        className={`group rounded-xl [perspective:1000px]`}\n        onClick={() => !isMatched && onClick()}\n        style={{\n          height: `${cardSize}px`,\n          width: `${cardSize}px`,\n          opacity: isMatched ? 0.5 : 1,\n          transition: 'opacity 0.25s ease-in', // Decrease opacity if matched\n        }}\n      >\n        <div className={`relative h-full w-full rounded-xl shadow-xl transition-all duration-500 text-slate-200 [transform-style:preserve-3d] [backface-visibility:hidden] ${isFlipped ? '[transform:rotateY(180deg)]' : (isMatched ? 'bg-green-500' : '')}`}>\n          <div className='absolute inset-0 flex rounded-xl bg-red-500 justify-center items-center align-center'>\n            {isFlipped ? content : ''}\n          </div>\n          <div className={`absolute inset-0 h-full w-full rounded-xl bg-red-500 flex justify-center items-center align-center text-slate-200 [transform:rotateY(180deg)] [backface-visibility:hidden] `}>\n            {isFlipped ? content : content}\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst MemoryGame = ({ difficulty }) => {\n  const gridSize = difficulty;\n  const totalPairs = difficulty * difficulty / 3;\n  const [cards, setCards] = useState(generateCards(difficulty));\n  console.log(cards.length);\n  const [flippedCards, setFlippedCards] = useState([]);\n  const [matchedCards, setMatchedCards] = useState([]);\n  const [initialReveal, setInitialReveal] = useState(true);\n  const [timeLeft, updateTimeLeft] = useState(240);\n  const [currentTurnCount, setTurnCount] = useState(0);\n  const [gameOver, setGameOver] = useState(false);\n  // console.log(flippedCards);\n  // console.log(matchedCards);\n\n  useEffect(() => {\n    // Shuffle the cards when the component mounts or when the game restarts\n    setCards(generateCards(difficulty));\n    setFlippedCards([]);\n    setMatchedCards([]);\n    setInitialReveal(true);\n\n    const revealTimeout = setTimeout(() => {\n      setInitialReveal(false);\n    }, 2500);\n\n    return () => clearTimeout(revealTimeout);\n  }, [difficulty]);\n\n  useEffect(() => {\n    if (!initialReveal && timeLeft > 0 && matchedCards.length === totalPairs) {\n        console.log('You win!');\n        alert('You win!');\n        setGameOver(true);\n    }\n    if(!initialReveal && timeLeft === 0 || timeLeft < 0){\n      console.log('You lose!');\n      alert('You lose!');\n      setGameOver(true);\n    }\n  }, [initialReveal, timeLeft, matchedCards, totalPairs]);\n\n  useEffect(() => {\n    if (!initialReveal && timeLeft > 0) {\n      if(gameOver != true){\n        const timerInterval = setInterval(() => {\n          updateTimeLeft((prevTime) => prevTime - 1);\n        }, 1000);\n        return () => clearInterval(timerInterval);\n      }\n    }\n  }, [initialReveal, timeLeft, matchedCards, totalPairs]);\n  const handleCardClick = (index) => {\n    if (initialReveal || gameOver) {\n      return;\n    }\n    // Check if the clicked card is already flipped\n    if (\n      flippedCards.includes(index) ||\n      flippedCards.length === 3 ||\n      matchedCards.some((matched) => matched.indexes.includes(index))\n    ) {\n      return;\n    }\n\n    // Flip the clicked card\n    setFlippedCards([...flippedCards, index]);\n\n    if (flippedCards.length === 2) {\n      // Check for a match\n      const card1 = cards[flippedCards[0]];\n      const card2 = cards[flippedCards[1]];\n      const card3 = cards[index];\n\n      if (card1 === card2 && card2 === card3) {\n        const matchedContent = [card1, card2, card3];\n        const matchedIndexes = [...flippedCards, index];\n        setMatchedCards((prevMatchedCards) => [\n          ...prevMatchedCards,\n          { content: matchedContent, indexes: matchedIndexes },\n        ]);\n        console.log('cards matched');\n        setFlippedCards([]);\n        setTurnCount(currentTurnCount+1);\n      } else {\n        console.log('cards mismatched');\n        setTurnCount(currentTurnCount+1);\n      }\n\n      setTimeout(() => {\n        setFlippedCards([]);\n      }, 1000);\n\n    }\n  };\n  const formattedTime = `${Math.floor(timeLeft / 60)}:${(timeLeft % 60).toLocaleString('en-US', { minimumIntegerDigits: 2 })}`;\n\n  return (\n    <div className=\"overflow-y-scroll min-h-screen bg-[rgb(18,18,18,0.9)] flex justify-center w-full text-white flex-col\">\n      <div className='w-full h-[10vh]'></div>\n      <div className='w-full h-full flex flex-col justify-center items-center'>\n        <div className='flex flex-col w-full  h-full items-center justify-center overflow-x-hidden'>\n          <div className='flex justify-around w-1/2 max-[425px]:w-full m-4'>\n            <h1>Timer: {formattedTime}</h1>\n            <h1>Turns: {currentTurnCount}</h1>\n          </div>\n            <div className={`flex items-center justify-center grid grid-cols-7 gap-3`}>\n            {cards.map((symbol, index) => (\n              <Card\n                key={index}\n                content={symbol}\n                isFlipped={initialReveal || flippedCards.includes(index) || matchedCards.some((matched) => matched.indexes.includes(index))}\n                isMatched={matchedCards.some((matched) => matched.indexes.includes(index))}\n                onClick={() => handleCardClick(index)}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default MemoryGame;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}