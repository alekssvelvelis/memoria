{"ast":null,"code":"var _jsxFileName = \"/Users/alekssvelvelis/Desktop/memory-game/src/components/GameBoard.jsx\";\nimport React from 'react';\nimport Card from './Card';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GameBoard = ({\n  cards,\n  flippedCards,\n  matchedCards,\n  initialReveal,\n  difficulty,\n  handleCardClick\n}) => {\n  function getGridScale(difficulty) {\n    let baseScale = 0.12;\n    switch (difficulty) {\n      case 3:\n        baseScale *= 1.6;\n        break;\n      case 4:\n        baseScale *= 1.6;\n        break;\n      case 5:\n        baseScale *= 1.25;\n        break;\n      case 6:\n        baseScale *= 1.11;\n        break;\n      case 7:\n        baseScale *= 0.9;\n        break;\n      default:\n        break;\n    }\n    return Math.min(window.innerWidth * baseScale, 100);\n  }\n\n  // Generate random keyframes for each card\n  const generateRandomKeyframes = () => {\n    const randomRotation = Math.random() * 230 - 115;\n    return {\n      animationName: `rotateAndMoveDown-${randomRotation}`,\n      '@keyframes rotateAndMoveDown': {\n        '0%': {\n          transform: `rotate(${randomRotation}deg) translateY(0)`\n        },\n        '100%': {\n          transform: `rotate(${randomRotation}deg) translateY(100vh)`\n        }\n      }\n    };\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `flex items-center justify-center grid grid-cols-3 gap-3 mb-6 mt-2`,\n    children: cards.map((symbol, index) => {\n      const randomKeyframes = generateRandomKeyframes();\n      return /*#__PURE__*/_jsxDEV(Card, {\n        content: symbol,\n        isFlipped: initialReveal || flippedCards.includes(index) || matchedCards.some(matched => matched.indexes.includes(index)),\n        isMatched: matchedCards.some(matched => matched.indexes.includes(index)),\n        onClick: () => handleCardClick(index),\n        cardSize: getGridScale(difficulty),\n        randomKeyframes: randomKeyframes // Pass the random keyframes as prop\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this);\n    })\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_c = GameBoard;\nexport default GameBoard;\nvar _c;\n$RefreshReg$(_c, \"GameBoard\");","map":{"version":3,"names":["React","Card","jsxDEV","_jsxDEV","GameBoard","cards","flippedCards","matchedCards","initialReveal","difficulty","handleCardClick","getGridScale","baseScale","Math","min","window","innerWidth","generateRandomKeyframes","randomRotation","random","animationName","transform","className","children","map","symbol","index","randomKeyframes","content","isFlipped","includes","some","matched","indexes","isMatched","onClick","cardSize","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/alekssvelvelis/Desktop/memory-game/src/components/GameBoard.jsx"],"sourcesContent":["import React from 'react';\nimport Card from './Card';\n\nconst GameBoard = ({ cards, flippedCards, matchedCards, initialReveal, difficulty, handleCardClick }) => {\n  function getGridScale(difficulty) {\n    let baseScale = 0.12\n    switch(difficulty){\n      case 3:\n        baseScale *= 1.6;\n        break;\n      case 4:\n        baseScale *= 1.6;\n        break;\n      case 5:\n        baseScale *= 1.25;\n        break;\n      case 6:\n        baseScale *= 1.11;\n        break;\n      case 7:\n        baseScale *= 0.9;\n        break;\n      default:\n        break;\n    }\n    return Math.min(window.innerWidth * baseScale, 100);\n  }\n\n  // Generate random keyframes for each card\n  const generateRandomKeyframes = () => {\n    const randomRotation = Math.random() * 230 - 115;\n    return {\n      animationName: `rotateAndMoveDown-${randomRotation}`,\n      '@keyframes rotateAndMoveDown': {\n        '0%': {\n          transform: `rotate(${randomRotation}deg) translateY(0)`,\n        },\n        '100%': {\n          transform: `rotate(${randomRotation}deg) translateY(100vh)`,\n        },\n      },\n    };\n  };\n\n  return (\n    <div className={`flex items-center justify-center grid grid-cols-3 gap-3 mb-6 mt-2`}>\n      {cards.map((symbol, index) => {\n        const randomKeyframes = generateRandomKeyframes();\n        return (\n          <Card\n            key={index}\n            content={symbol}\n            isFlipped={initialReveal || flippedCards.includes(index) || matchedCards.some((matched) => matched.indexes.includes(index))}\n            isMatched={matchedCards.some((matched) => matched.indexes.includes(index))}\n            onClick={() => handleCardClick(index)}\n            cardSize={getGridScale(difficulty)}\n            randomKeyframes={randomKeyframes} // Pass the random keyframes as prop\n          />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default GameBoard;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,SAAS,GAAGA,CAAC;EAAEC,KAAK;EAAEC,YAAY;EAAEC,YAAY;EAAEC,aAAa;EAAEC,UAAU;EAAEC;AAAgB,CAAC,KAAK;EACvG,SAASC,YAAYA,CAACF,UAAU,EAAE;IAChC,IAAIG,SAAS,GAAG,IAAI;IACpB,QAAOH,UAAU;MACf,KAAK,CAAC;QACJG,SAAS,IAAI,GAAG;QAChB;MACF,KAAK,CAAC;QACJA,SAAS,IAAI,GAAG;QAChB;MACF,KAAK,CAAC;QACJA,SAAS,IAAI,IAAI;QACjB;MACF,KAAK,CAAC;QACJA,SAAS,IAAI,IAAI;QACjB;MACF,KAAK,CAAC;QACJA,SAAS,IAAI,GAAG;QAChB;MACF;QACE;IACJ;IACA,OAAOC,IAAI,CAACC,GAAG,CAACC,MAAM,CAACC,UAAU,GAAGJ,SAAS,EAAE,GAAG,CAAC;EACrD;;EAEA;EACA,MAAMK,uBAAuB,GAAGA,CAAA,KAAM;IACpC,MAAMC,cAAc,GAAGL,IAAI,CAACM,MAAM,CAAC,CAAC,GAAG,GAAG,GAAG,GAAG;IAChD,OAAO;MACLC,aAAa,EAAG,qBAAoBF,cAAe,EAAC;MACpD,8BAA8B,EAAE;QAC9B,IAAI,EAAE;UACJG,SAAS,EAAG,UAASH,cAAe;QACtC,CAAC;QACD,MAAM,EAAE;UACNG,SAAS,EAAG,UAASH,cAAe;QACtC;MACF;IACF,CAAC;EACH,CAAC;EAED,oBACEf,OAAA;IAAKmB,SAAS,EAAG,mEAAmE;IAAAC,QAAA,EACjFlB,KAAK,CAACmB,GAAG,CAAC,CAACC,MAAM,EAAEC,KAAK,KAAK;MAC5B,MAAMC,eAAe,GAAGV,uBAAuB,CAAC,CAAC;MACjD,oBACEd,OAAA,CAACF,IAAI;QAEH2B,OAAO,EAAEH,MAAO;QAChBI,SAAS,EAAErB,aAAa,IAAIF,YAAY,CAACwB,QAAQ,CAACJ,KAAK,CAAC,IAAInB,YAAY,CAACwB,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,OAAO,CAACH,QAAQ,CAACJ,KAAK,CAAC,CAAE;QAC5HQ,SAAS,EAAE3B,YAAY,CAACwB,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,OAAO,CAACH,QAAQ,CAACJ,KAAK,CAAC,CAAE;QAC3ES,OAAO,EAAEA,CAAA,KAAMzB,eAAe,CAACgB,KAAK,CAAE;QACtCU,QAAQ,EAAEzB,YAAY,CAACF,UAAU,CAAE;QACnCkB,eAAe,EAAEA,eAAgB,CAAC;MAAA,GAN7BD,KAAK;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAOX,CAAC;IAEN,CAAC;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACC,EAAA,GA3DIrC,SAAS;AA6Df,eAAeA,SAAS;AAAC,IAAAqC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}